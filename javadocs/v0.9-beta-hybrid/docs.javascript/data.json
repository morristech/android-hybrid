{
    "project": {
        "name": "Siminov Hybrid",
        "description": "Siminov Hybrid JavaScript APIs Documentation",
        "version": "0.9",
        "url": "http://siminov.github.com/android-hybrid",
        "logo": "yuidoc.assets/siminov-logo.gif"
    },
    "files": {
        "assets\\Siminov\\Adapter\\Adapter.js": {
            "name": "assets\\Siminov\\Adapter\\Adapter.js",
            "modules": {
                "Adapter": 1
            },
            "classes": {
                "Adapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Collection\\Dictionary.js": {
            "name": "assets\\Siminov\\Collection\\Dictionary.js",
            "modules": {
                "Collection": 1
            },
            "classes": {
                "Dictionary": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Collection\\StringBuilder.js": {
            "name": "assets\\Siminov\\Collection\\StringBuilder.js",
            "modules": {},
            "classes": {
                "StringBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IAverage.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "modules": {
                "Database": 1,
                "Impl": 1
            },
            "classes": {
                "IAverage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IAverageClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "modules": {},
            "classes": {
                "IAverageClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ICount.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "modules": {},
            "classes": {
                "ICount": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ICountClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "modules": {},
            "classes": {
                "ICountClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IDelete.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "modules": {},
            "classes": {
                "IDelete": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IDeleteClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "modules": {},
            "classes": {
                "IDeleteClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IGroupConcat.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "modules": {},
            "classes": {
                "IGroupConcat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "modules": {},
            "classes": {
                "IGroupConcatClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IMax.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "modules": {},
            "classes": {
                "IMax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IMaxClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "modules": {},
            "classes": {
                "IMaxClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IMin.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "modules": {},
            "classes": {
                "IMin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\IMinClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "modules": {},
            "classes": {
                "IMinClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ISelect.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "modules": {},
            "classes": {
                "ISelect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ISelectClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "modules": {},
            "classes": {
                "ISelectClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ISum.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "modules": {},
            "classes": {
                "ISum": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ISumClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "modules": {},
            "classes": {
                "ISumClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ITotal.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "modules": {},
            "classes": {
                "ITotal": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Impl\\ITotalClause.js": {
            "name": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "modules": {},
            "classes": {
                "ITotalClause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Clause.js": {
            "name": "assets\\Siminov\\Database\\Clause.js",
            "modules": {},
            "classes": {
                "Clause": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Database.js": {
            "name": "assets\\Siminov\\Database\\Database.js",
            "modules": {},
            "classes": {
                "Database": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Database\\Select.js": {
            "name": "assets\\Siminov\\Database\\Select.js",
            "modules": {},
            "classes": {
                "Select": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Events\\EventHandler.js": {
            "name": "assets\\Siminov\\Events\\EventHandler.js",
            "modules": {
                "EventHandler": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Exception\\SiminovException.js": {
            "name": "assets\\Siminov\\Exception\\SiminovException.js",
            "modules": {
                "Exception": 1
            },
            "classes": {
                "SiminovException": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Exception\\SiminovExceptionHandler.js": {
            "name": "assets\\Siminov\\Exception\\SiminovExceptionHandler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Log\\Log.js": {
            "name": "assets\\Siminov\\Log\\Log.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\ApplicationDescriptor.js": {
            "name": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "modules": {},
            "classes": {
                "ApplicationDescriptor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\DatabaseDescriptor.js": {
            "name": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "modules": {},
            "classes": {
                "DatabaseDescriptor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js": {
            "name": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "modules": {},
            "classes": {
                "DatabaseMappingDescriptor": 1,
                "DatabaseMappingDescriptor.Column": 1,
                "DatabaseMappingDescriptor.Index": 1,
                "DatabaseMappingDescriptor.Relationship": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\HybridDescriptor.js": {
            "name": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "modules": {},
            "classes": {
                "HybridDescriptor.Adapter": 1,
                "HybridDescriptor.Adapter.Handler": 1,
                "HybridDescription.Adapter.Handler.Parameter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\HybridSiminovDatas.js": {
            "name": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "modules": {},
            "classes": {
                "HybridSiminovDatas": 1,
                "HybridSiminovDatas.HybridSiminovData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Model\\LibraryDescriptor.js": {
            "name": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "modules": {},
            "classes": {
                "LibraryDescriptor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Parser\\SIDatasHelper.js": {
            "name": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "modules": {},
            "classes": {
                "SIDatasHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Parser\\SIJsonHelper.js": {
            "name": "assets\\Siminov\\Parser\\SIJsonHelper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Resource\\Resources.js": {
            "name": "assets\\Siminov\\Resource\\Resources.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Utils\\FunctionUtils.js": {
            "name": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "modules": {},
            "classes": {
                "FunctionUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Constants.js": {
            "name": "assets\\Siminov\\Constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Import.js": {
            "name": "assets\\Siminov\\Import.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Siminov-build.js": {
            "name": "assets\\Siminov\\Siminov-build.js",
            "modules": {},
            "classes": {
                "Siminov": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\Siminov\\Siminov.js": {
            "name": "assets\\Siminov\\Siminov.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "yuidoc.assets\\bootstrap\\assets\\vendor\\bootstrap\\js\\bootstrap.min.js": {
            "name": "yuidoc.assets\\bootstrap\\assets\\vendor\\bootstrap\\js\\bootstrap.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Adapter": {
            "name": "Adapter",
            "submodules": {},
            "classes": {
                "Adapter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 26,
            "description": "It is one which describes properties required to map Web TO Native and vice-versa.",
            "is_constructor": 1
        },
        "Collection": {
            "name": "Collection",
            "submodules": {},
            "classes": {
                "Dictionary": 1,
                "StringBuilder": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 27,
            "description": "A Collection represents a group of objects, know as its elements.\nSiminov Collection (SI Collection) is a set of classes and interfaces that implement commonly reusable collection data structures.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Array of characters.",
                    "type": "String"
                }
            ]
        },
        "Database": {
            "name": "Database",
            "submodules": {
                "Impl": 1
            },
            "classes": {
                "IAverage": 1,
                "IAverageClause": 1,
                "ICount": 1,
                "ICountClause": 1,
                "IDelete": 1,
                "IDeleteClause": 1,
                "IGroupConcat": 1,
                "IGroupConcatClause": 1,
                "IMax": 1,
                "IMaxClause": 1,
                "IMin": 1,
                "IMinClause": 1,
                "ISelect": 1,
                "ISelectClause": 1,
                "ISum": 1,
                "ISumClause": 1,
                "ITotal": 1,
                "ITotalClause": 1,
                "Clause": 1,
                "Database": 1,
                "Select": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 28,
            "description": "Exposes classes which deal with database.\nA Siminov Database Abstraction Layer is an application programming interface which unifies the communication between a computer application and database such as SQLite.\nSiminov Database Layer reduce the amount of work by providing a consistent API to the developer and hide the database specifics behind this interface as much as possible."
        },
        "Impl": {
            "name": "Impl",
            "submodules": {},
            "classes": {
                "IAverage": 1,
                "IAverageClause": 1,
                "ICount": 1,
                "ICountClause": 1,
                "IDelete": 1,
                "IDeleteClause": 1,
                "IGroupConcat": 1,
                "IGroupConcatClause": 1,
                "IMax": 1,
                "IMaxClause": 1,
                "IMin": 1,
                "IMinClause": 1,
                "ISelect": 1,
                "ISelectClause": 1,
                "ISum": 1,
                "ISumClause": 1,
                "ITotal": 1,
                "ITotalClause": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Database",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 36,
            "description": "Impl contain all interfaces required by database layer to deal with database.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "select",
                    "description": "Select class object.",
                    "type": "Select"
                }
            ]
        },
        "EventHandler": {
            "name": "EventHandler",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "assets\\Siminov\\Events\\EventHandler.js",
            "line": 20,
            "description": "Any event triggered by Siminov is first handled by this function later it will deliver to appropriate Event APIs."
        },
        "Exception": {
            "name": "Exception",
            "submodules": {},
            "classes": {
                "SiminovException": 1,
                "Log": 1,
                "ApplicationDescriptor": 1,
                "DatabaseDescriptor": 1,
                "DatabaseMappingDescriptor": 1,
                "DatabaseMappingDescriptor.Column": 1,
                "DatabaseMappingDescriptor.Index": 1,
                "DatabaseMappingDescriptor.Relationship": 1,
                "HybridDescriptor.Adapter": 1,
                "HybridDescriptor.Adapter.Handler": 1,
                "HybridDescription.Adapter.Handler.Parameter": 1,
                "HybridSiminovDatas": 1,
                "HybridSiminovDatas.HybridSiminovData": 1,
                "LibraryDescriptor": 1,
                "SIDatasHelper": 1,
                "FunctionUtils": 1,
                "Siminov": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "assets\\Siminov\\Siminov-build.js",
            "line": 19,
            "description": "It contain Siminov defined exceptions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Name of Class",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "Name of Method",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message",
                    "type": "String"
                }
            ]
        }
    },
    "classes": {
        "Adapter": {
            "name": "Adapter",
            "shortname": "Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Adapter",
            "namespace": "",
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 26,
            "description": "Handle Request between NATIVE-TO-WEB and WEB-TO-NATIVE.\nExposes method to GET and SET information about request."
        },
        "Dictionary": {
            "name": "Dictionary",
            "shortname": "Dictionary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collection",
            "namespace": "",
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 27,
            "description": "Dictionary maps keys to values. A Dictionary cannot contain duplicate keys; each key can map to at most on value."
        },
        "StringBuilder": {
            "name": "StringBuilder",
            "shortname": "StringBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collection",
            "namespace": "",
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 27,
            "description": "A mutable sequence of characters.\nThe principal operations on a StringBuilder are the append methods.\nThe append method always adds these characters at the end of the builder;"
        },
        "IAverage": {
            "name": "IAverage",
            "shortname": "IAverage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 36,
            "description": "Exposes API's to get average value of all non-NULL X within a group. \nString and BLOB values that do not look like numbers are interpreted as 0.\nThe result of avg() is always a floating point value as long as at there is at least one non-NULL input even if all inputs are integers.\nThe result of avg() is NULL if and only if there are no non-NULL inputs."
        },
        "IAverageClause": {
            "name": "IAverageClause",
            "shortname": "IAverageClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate average."
        },
        "ICount": {
            "name": "ICount",
            "shortname": "ICount",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 35,
            "description": "Exposes API's to get count of the number of times that X is not NULL in a group.\nThe count(*) function (with no arguments) returns the total number of rows in the group."
        },
        "ICountClause": {
            "name": "ICountClause",
            "shortname": "ICountClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate count."
        },
        "IDelete": {
            "name": "IDelete",
            "shortname": "IDelete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 36,
            "description": "Exposes API's to delete tuples from table."
        },
        "IDeleteClause": {
            "name": "IDeleteClause",
            "shortname": "IDeleteClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to delete tuple from table."
        },
        "IGroupConcat": {
            "name": "IGroupConcat",
            "shortname": "IGroupConcat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 36,
            "description": "Exposes API's to get group concat that returns a string which is the concatenation of all non-NULL values of X.\nIf parameter Y is present then it is used as the separator between instances of X. A comma (\",\") is used as the separator if Y is omitted.\nThe order of the concatenated elements is arbitrary."
        },
        "IGroupConcatClause": {
            "name": "IGroupConcatClause",
            "shortname": "IGroupConcatClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate group concat."
        },
        "IMax": {
            "name": "IMax",
            "shortname": "IMax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 36,
            "description": "Exposes API's to returns the maximum value of all values in the group.\nThe maximum value is the value that would be returned last in an ORDER BY on the same column. \nAggregate max() returns NULL if and only if there are no non-NULL values in the group."
        },
        "IMaxClause": {
            "name": "IMaxClause",
            "shortname": "IMaxClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate maximum."
        },
        "IMin": {
            "name": "IMin",
            "shortname": "IMin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 36,
            "description": "Exposes API's to returns the minimum non-NULL value of all values in the group.\nThe minimum value is the first non-NULL value that would appear in an ORDER BY of the column.\nAggregate min() returns NULL if and only if there are no non-NULL values in the group."
        },
        "IMinClause": {
            "name": "IMinClause",
            "shortname": "IMinClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate minimum."
        },
        "ISelect": {
            "name": "ISelect",
            "shortname": "ISelect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 36,
            "description": "Exposes API's to get tuples from table based on information provided."
        },
        "ISelectClause": {
            "name": "ISelectClause",
            "shortname": "ISelectClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to get tuples from table.."
        },
        "ISum": {
            "name": "ISum",
            "shortname": "ISum",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 37,
            "description": "Exposes API's to return sum of all non-NULL values in the group.\nIf there are no non-NULL input rows then sum() returns NULL but total() returns 0.0.\nNULL is not normally a helpful result for the sum of no rows but the SQL standard requires it and most other SQL database engines implement sum() that way so SQLite does it in the same way in order to be compatible.\nThe result of sum() is an integer value if all non-NULL inputs are integers."
        },
        "ISumClause": {
            "name": "ISumClause",
            "shortname": "ISumClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 37,
            "description": "Exposes API's to provide condition on where clause to calculate sum."
        },
        "ITotal": {
            "name": "ITotal",
            "shortname": "ITotal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 37,
            "description": "Exposes API's to return total of all non-NULL values in the group.\nThe non-standard total() function is provided as a convenient way to work around this design problem in the SQL language.\nThe result of total() is always a floating point value."
        },
        "ITotalClause": {
            "name": "ITotalClause",
            "shortname": "ITotalClause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "submodule": "Impl",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 36,
            "description": "Exposes API's to provide condition on where clause to calculate total."
        },
        "Clause": {
            "name": "Clause",
            "shortname": "Clause",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Clause.js",
            "line": 28,
            "description": "Exposes API to deal with conditions used in query."
        },
        "Database": {
            "name": "Database",
            "shortname": "Database",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 28,
            "description": "Exposes methods to deal with database.\nIt has methods to create, delete, and perform other common database management tasks."
        },
        "Select": {
            "name": "Select",
            "shortname": "Select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 28,
            "description": "Exposes API to deal with conditions and other constraints used in query."
        },
        "SiminovException": {
            "name": "SiminovException",
            "shortname": "SiminovException",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 26,
            "description": "This is general exception, which is thrown through Siminov APIs, if any exception occur while performing any tasks."
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Log\\Log.js",
            "line": 20,
            "description": "Log Siminov Messages.",
            "is_constructor": 1
        },
        "ApplicationDescriptor": {
            "name": "ApplicationDescriptor",
            "shortname": "ApplicationDescriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 18,
            "description": "Exposes methods to GET and SET Application Descriptor information as per define in ApplicationDescriptor.si.xml file by application.\n\t\t\n\tExample:\n\t\t<siminov>\n\t\t\n\t\t\t<property name=\"name\">SIMINOV HYBRID TEMPLATE</property>\t\n\t\t\t<property name=\"description\">Siminov Hybrid Template Application</property>\n\t\t\t<property name=\"version\">0.9</property>\n\t\t\n\t\t\t<property name=\"load_initially\">true</property>\n\t\t\n\t\t\t<!-- DATABASE-DESCRIPTORS -->\n\t\t\t<database-descriptors>\n\t\t\t\t<database-descriptor>DatabaseDescriptor.si.xml</database-descriptor>\n\t\t\t</database-descriptors>\n\t\t\n\t\t\t<!-- SIMINOV EVENTS -->\n\t\t \t<event-handlers>\n\t\t\t    <event-handler>siminov.hybrid.template.events.SiminovEventHandler</event-handler>\n\t\t\t    <event-handler>siminov.hybrid.template.events.DatabaseEventHandler</event-handler>\n\t\t\t</event-handlers>\n\t\t\t\t\n\t\t</siminov>",
            "is_constructor": 1
        },
        "DatabaseDescriptor": {
            "name": "DatabaseDescriptor",
            "shortname": "DatabaseDescriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 20,
            "description": "Exposes methods to GET and SET Database Descriptor information as per define in DatabaseDescriptor.si.xml file by application.\n\t\n\t\t\n\tExample:\n\t\t<database-descriptor>\n\t\t\n\t\t\t<property name=\"database_name\">SIMINOV-HYBRID-TEMPLATE</property>\n\t\t\t<property name=\"description\">Siminov Hybrid Template Database Config</property>\n\t\t\t<property name=\"is_locking_required\">true</property>\n\t\t\t<property name=\"external_storage\">false</property>\n\t\t\n\t\t\t<database-mappings>\n\t\t\t\t<database-mapping path=\"Liquor-Mappings/Liquor.si.xml\" />\n\t\t\t\t<database-mapping path=\"Liquor-Mappings/LiquorBrand.si.xml\" />\n\t\t\t</database-mappings>\n\t\t\n\t\t\n\t\t\t<libraries>\n\t\t\t\t<library>siminov.orm.library.template.resources</library>\n\t\t\t</libraries>\n\t\t\n\t\t</database-descriptor>",
            "is_constructor": 1
        },
        "DatabaseMappingDescriptor": {
            "name": "DatabaseMappingDescriptor",
            "shortname": "DatabaseMappingDescriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 18,
            "description": "Exposes methods to GET and SET Library Descriptor information as per define in DatabaseDescriptor.si.xml or LibraryDescriptor.si.xml  file by application.\n\t\t\n\tExample:\n\n\t\t<database-mapping>\n\t\t\n\t\t\t<table table_name=\"LIQUOR\" class_name=\"Liquor\">\n\t\t\n\t\t\t\t<column variable_name=\"liquorType\" column_name=\"LIQUOR_TYPE\">\n\t\t\t\t\t<property name=\"type\">String</property>\n\t\t\t\t\t<property name=\"primary_key\">true</property>\n\t\t\t\t\t<property name=\"not_null\">true</property>\n\t\t\t\t\t<property name=\"unique\">true</property>\n\t\t\t\t</column>\t\t\n\t\t\n\t\t\t\t<column variable_name=\"description\" column_name=\"DESCRIPTION\">\n\t\t\t\t\t<property name=\"type\">String</property>\n\t\t\t\t</column>\n\t\t\n\t\t\t\t<column variable_name=\"history\" column_name=\"HISTORY\">\n\t\t\t\t\t<property name=\"type\">String</property>\n\t\t\t\t</column>\n\t\t\n\t\t\t\t<column variable_name=\"link\" column_name=\"LINK\">\n\t\t\t\t\t<property name=\"type\">String</property>\n\t\t\t\t\t<property name=\"default\">www.wikipedia.org</property>\n\t\t\t\t</column>\n\t\t\n\t\t\t\t<column variable_name=\"alcholContent\" column_name=\"ALCHOL_CONTENT\">\n\t\t\t\t\t<property name=\"type\">String</property>\n\t\t\t\t</column>\n\t\t\n\t\t\t\t<index name=\"LIQUOR_INDEX_BASED_ON_LINK\" unique=\"true\">\n\t\t\t\t\t<column>HISTORY</column>\n\t\t\t\t</index>\n\t\t\n\t\t\t\t<relationships>\n\t\t\n\t\t\t\t    <one-to-many refer=\"liquorBrands\" refer_to=\"LiquorBrand\" on_update=\"cascade\" on_delete=\"cascade\">\n\t\t\t\t\t\t<property name=\"load\">true</property>\n\t\t\t\t\t</one-to-many>\t\t\n\t\t\n\t\t\t\t</relationships>\n\t\t\n\t\t\t</table>\n\t\t\n\t\t</database-mapping>",
            "is_constructor": 1
        },
        "DatabaseMappingDescriptor.Column": {
            "name": "DatabaseMappingDescriptor.Column",
            "shortname": "DatabaseMappingDescriptor.Column",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 185,
            "description": "Exposes methods to GET and SET Column information as per define in DatabaseMappingDescriptor.si.xml file by application.\n\n\t Example:\n\t\n\t\t <column variable_name=\"liquorType\" column_name=\"LIQUOR_TYPE\">\n\t\t\t <property name=\"type\">TEXT</property>\n\t\t\t <property name=\"primary_key\">true</property>\n\t\t\t <property name=\"not_null\">true</property>\n\t\t\t <property name=\"unique\">true</property>\n\t\t </column>"
        },
        "DatabaseMappingDescriptor.Index": {
            "name": "DatabaseMappingDescriptor.Index",
            "shortname": "DatabaseMappingDescriptor.Index",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 431,
            "description": "Exposes methods to GET and SET Reference Map information as per define in DatabaseMappingDescriptor.si.xml file by application.\n\n\tExample:\n\t\t<index name=\"LIQUOR_INDEX_BASED_ON_LINK\" unique=\"true\">\n\t\t\t<column>HISTORY</column>\n\t\t</index>",
            "is_constructor": 1
        },
        "DatabaseMappingDescriptor.Relationship": {
            "name": "DatabaseMappingDescriptor.Relationship",
            "shortname": "DatabaseMappingDescriptor.Relationship",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 516,
            "description": "Contains relationship details."
        },
        "HybridDescriptor.Adapter": {
            "name": "HybridDescriptor.Adapter",
            "shortname": "HybridDescriptor.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 245,
            "description": "Exposes methods to GET and SET Hybrid Descriptor Adapter information as per define in HybridDescriptor.si.xml file or standalone xml file in application.\n\t\t\nExample:\n\n\t<adapter>\n\t\t<property name=\"name\">name_of_adapter</property>\n\t\t<property name=\"description\">description_about_adapter</property>\n\t\t<property name=\"type\">type_of_adapter</property>\n\t\t<property name=\"map_to\">map_to_class_name</property>\n\t\t<property name=\"cache\">should_be_cached_or_not</property>\n\t\t\n\t\t<handlers>\n\t\t\n\t\t\t<handler>\n\t\t\t\t<property name=\"name\">name_of_handler</property>\n\t\t\t\t<property name=\"description\">description_about_handler</property>\n\t\t\t\t<property name=\"map_to\">map_to_function_name</property>\n\t\t\t\t\n\t\t\t\t<parameters>\n\t\t\t\t\t\n\t\t\t\t\t<parameter>\n\t\t\t\t\t\t<property name=\"name\"></property>\n\t\t\t\t\t\t<property name=\"description\"></property>\n\t\t\t\t\t\t<property name=\"type\"></property>\n\t\t\t\t\t</parameter>\n\t\t\t\t\n\t\t\t\t</parameter>\n\t\t\t\t\n\t\t\t\t<return>\n\t\t\t\t\t\t<property name=\"type\">return_data_type</property>\n\t\t\t\t\t\t<property name=\"description\">description_about_return_data</property>\n\t\t\t\t</return>\n\t\t\t\t\n\t\t\t</handler>\n\t\t\n\t\t</handlers>\n\t\t\n\t</adapter>",
            "is_constructor": 1
        },
        "HybridDescriptor.Adapter.Handler": {
            "name": "HybridDescriptor.Adapter.Handler",
            "shortname": "HybridDescriptor.Adapter.Handler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 454,
            "description": "Exposes methods to GET and SET Hybrid Descriptor Adapter Handler information as per define in HybridDescriptor.si.xml file or in standalone adapter xml file in application."
        },
        "HybridDescription.Adapter.Handler.Parameter": {
            "name": "HybridDescription.Adapter.Handler.Parameter",
            "shortname": "HybridDescription.Adapter.Handler.Parameter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 585,
            "description": "Exposes methods to GET and SET Parameter information as per define in HybridDescriptor.si.xml file or in standalone adapter xml file in application."
        },
        "HybridSiminovDatas": {
            "name": "HybridSiminovDatas",
            "shortname": "HybridSiminovDatas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 18,
            "description": "Exposes methods to GET and SET Siminov Hybrid Datas structure.\n\t\nExample:\n\t<siminov-hybrid-data>\n\t\n\t    <data type=\"data_type\">\n\t        <value type=\"value_type\">value</value>\n\t        <data type=\"data_type\"/>\n\t    </data>\n\t\n\t    <data type=\"data_type\" />\n\t    \n\t</siminov-hybrid-data>",
            "is_constructor": 1
        },
        "HybridSiminovDatas.HybridSiminovData": {
            "name": "HybridSiminovDatas.HybridSiminovData",
            "shortname": "HybridSiminovDatas.HybridSiminovData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 66,
            "description": "Exposes methods to GET and SET Siminov Hybrid Data structure.\n \n    <data type=\"data_type\">\n        <value type=\"value_type\">value</value>\n        <data type=\"data_type\"/>\n    </data>",
            "is_constructor": 1
        },
        "LibraryDescriptor": {
            "name": "LibraryDescriptor",
            "shortname": "LibraryDescriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 18,
            "description": "Exposes methods to GET and SET Library Descriptor information as per define in LibraryDescriptor.si.xml file by application.\n\t\t\n\tExample:\n\n\t\t<library>\n\t\t\n\t\t\t<property name=\"name\">SIMINOV LIBRARY TEMPLATE</property>\n\t\t\t<property name=\"description\">Siminov Library Template</property>\n\t\t\n\t\t\t<!-- Database Mappings -->\n\t\t\t\t<database-mappings>\n\t\t\t\t\t<database-mapping path=\"Credential.si.xml\" />\n\t\t\t\t</database-mappings>\n\t\t\n\t\t\t\t \t<!-- OR -->\n\t\t\t\t \n\t\t\t\t<database-mappings>\n\t\t\t\t\t<database-mapping path=\"siminov.orm.library.template.model.Credential\" />\n\t\t\t\t</database-mappings>\n\t\t\t \n\t\t</library>",
            "is_constructor": 1
        },
        "SIDatasHelper": {
            "name": "SIDatasHelper",
            "shortname": "SIDatasHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "line": 20,
            "description": "Exposes APIs to deal with Models, it convert si datas to models or models to si datas."
        },
        "FunctionUtils": {
            "name": "FunctionUtils",
            "shortname": "FunctionUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 133,
            "description": "It provide APIs to deal with class."
        },
        "Siminov": {
            "name": "Siminov",
            "shortname": "Siminov",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Exception",
            "namespace": "",
            "file": "assets\\Siminov\\Siminov-build.js",
            "line": 19,
            "description": "Exposes methods to deal with SIMINOV HYBRID FRAMEWORK.\n\n\tSuch As\n\n\t\t1. Initialize: Entry point to the SIMINOV HYBRID."
        }
    },
    "classitems": [
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 42,
            "description": "Get Adapter Name.",
            "itemtype": "method",
            "name": "getAdapterName",
            "return": {
                "description": "Name of Adapter.",
                "type": "String"
            },
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 52,
            "description": "Set Adapter Name.",
            "itemtype": "method",
            "name": "setAdapterName",
            "params": [
                {
                    "name": "value",
                    "description": "Name of Adapter.",
                    "type": "String"
                }
            ],
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 63,
            "description": "Get Handler Name.",
            "itemtype": "method",
            "name": "getHandlerName",
            "return": {
                "description": "Name of Handler.",
                "type": "String"
            },
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 73,
            "description": "Set Handler Name.",
            "itemtype": "method",
            "name": "setHandlerName",
            "params": [
                {
                    "name": "value",
                    "description": "Name of Handler",
                    "type": "String"
                }
            ],
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 84,
            "description": "Add Adapter Parameter.",
            "itemtype": "method",
            "name": "addParameter",
            "params": [
                {
                    "name": "parameter",
                    "description": "Parameter.",
                    "type": "String"
                }
            ],
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 94,
            "description": "Get All Parameters.",
            "itemtype": "method",
            "name": "getParameters",
            "return": {
                "description": "All Parameters.",
                "type": "Array"
            },
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 105,
            "description": "Invokes Handler based on request parameter set.\nIt invokes Native API.",
            "itemtype": "method",
            "name": "invoke",
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Adapter\\Adapter.js",
            "line": 126,
            "description": "Any request from NATIVE-TO-WEB is first handled by this API.",
            "itemtype": "method",
            "name": "handle",
            "params": [
                {
                    "name": "action",
                    "description": "Name of Action. Action Represent WEB API Needs To Be Invoke.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data Is Basically Parameter To WEB API.",
                    "type": "String"
                }
            ],
            "class": "Adapter",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Dictionary",
            "module": "Adapter"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 37,
            "description": "Add a Key Value pair.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Object"
                }
            ],
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 51,
            "description": "Check whether key exists or not.",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false; TRUE: If key exists, FALSE: If key does not exists.",
                "type": "Boolean"
            },
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 62,
            "description": "Get value based on Key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value",
                "type": "Object"
            },
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 73,
            "description": "Remove value based on key.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 84,
            "description": "Get All Keys.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "All Keys",
                "type": "Array"
            },
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 98,
            "description": "Get All Values.",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "Values.",
                "type": "Array"
            },
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\Dictionary.js",
            "line": 108,
            "description": "Get All Key and Values",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "Key and Values.",
                "type": "Array"
            },
            "class": "Dictionary",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "StringBuilder",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 42,
            "description": "Append adds given characters at the end of the builder.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "value",
                    "description": "Characters need to be append.",
                    "type": "String"
                }
            ],
            "class": "StringBuilder",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 55,
            "description": "Clear buffered StringBuider.\nRemove all elements saved.",
            "itemtype": "method",
            "name": "clear",
            "class": "StringBuilder",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Collection\\StringBuilder.js",
            "line": 66,
            "description": "Get characters saved in StringBuilder.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "All Characters",
                "type": "String"
            },
            "class": "StringBuilder",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IAverage",
            "module": "Collection"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 52,
            "description": "Name of Interface",
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 58,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAerageClause Interface.",
                "type": "IAerageClause"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 68,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 78,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAerageClause Interface.",
                "type": "IAerageClause"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 88,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverageClause Interface.",
                "type": "IAverageClause"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 98,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 108,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverageClause Interface.",
                "type": "IAverageClause"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 118,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 128,
            "description": "Used to provide name of column for which average will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverage.js",
            "line": 138,
            "description": "Used to get average, this method should be called in last to calculate average.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return average.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating average."
            ],
            "class": "IAverage",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IAverageClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IAverageClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IAverage Interface.",
                "type": "IAverage"
            },
            "class": "IAverageClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ICount",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 55,
            "description": "Used to specify DISTINCT condition.",
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 63,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICountClause Interface.",
                "type": "ICountClause"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 73,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 83,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICountClause Interface.",
                "type": "ICountClause"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 93,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICountClause Interface.",
                "type": "ICountClause"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 103,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 113,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICountClause Interface.",
                "type": "ICountClause"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 123,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 133,
            "description": "Used to provide name of column for which count will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICount.js",
            "line": 143,
            "description": "Used to get count, this method should be called in last to calculate count.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return count.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating count."
            ],
            "class": "ICount",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ICountClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 50,
            "description": "Name of Interface",
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 56,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 66,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 76,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 86,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 96,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 106,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 116,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 127,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ICountClause.js",
            "line": 137,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ICountClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IDelete",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 51,
            "description": "Name of Interface",
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 57,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDeleteClause Interface.",
                "type": "IDeleteClause"
            },
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 67,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 77,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDeleteClause Interface.",
                "type": "IDeleteClause"
            },
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 87,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDeleteClause Interface.",
                "type": "IDeleteClause"
            },
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDelete.js",
            "line": 97,
            "description": "Used to delete, this method should be called in last to delete tuples from table.",
            "itemtype": "method",
            "name": "execute",
            "throws": [
                "{SiminovException} Throws exception if any error occur while deleting tuples from table."
            ],
            "class": "IDelete",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IDeleteClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IDeleteClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IDelete Interface.",
                "type": "IDelete"
            },
            "class": "IDeleteClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IGroupConcat",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 51,
            "description": "Name of Interface",
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 57,
            "description": "Used to specify separator if Y is omitted.",
            "itemtype": "method",
            "name": "delimiter",
            "params": [
                {
                    "name": "delimiter",
                    "description": "Delimiter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 67,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcatClause Interface.",
                "type": "IGroupConcatClause"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 77,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 87,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcatClause Interface.",
                "type": "IGroupConcatClause"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 97,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcatClause Interface.",
                "type": "IGroupConcatClause"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 107,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 117,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcatClause Interface.",
                "type": "IGroupConcatClause"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 127,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 137,
            "description": "Used to provide name of column for which average will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcat.js",
            "line": 147,
            "description": "Used to get average, this method should be called in last to calculate group concat.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return group concat.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating group concat."
            ],
            "class": "IGroupConcat",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IGroupConcatClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IGroupConcat Interface.",
                "type": "IGroupConcat"
            },
            "class": "IGroupConcatClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IMax",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 51,
            "description": "Name of Interface",
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 57,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMaxClause Interface.",
                "type": "IMaxClause"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 67,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 77,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMaxClause Interface.",
                "type": "IMaxClause"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 87,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMaxClause Interface.",
                "type": "IMaxClause"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 97,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 107,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMaxClause Interface.",
                "type": "IMaxClause"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 117,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 127,
            "description": "Used to provide name of column for which maximum will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMax.js",
            "line": 137,
            "description": "Used to get maximum, this method should be called in last to calculate maximum.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return maximum.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating maximum."
            ],
            "class": "IMax",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IMaxClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMaxClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMaxClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IMin",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 52,
            "description": "Name of Interface",
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 58,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMinClause Interface.",
                "type": "IMinClause"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 68,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMin Interface.",
                "type": "IMin"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 78,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMinClause Interface.",
                "type": "IMinClause"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 88,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMinClause Interface.",
                "type": "IMinClause"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 98,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IMin Interface.",
                "type": "IMin"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 108,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMinClause Interface.",
                "type": "IMinClause"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 118,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMin Interface.",
                "type": "IMin"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 128,
            "description": "Used to provide name of column for which max will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMin Interface.",
                "type": "IMin"
            },
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMin.js",
            "line": 138,
            "description": "Used to get minimum, this method should be called in last to calculate minimum.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return minimum.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating minimum."
            ],
            "class": "IMin",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "IMinClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\IMinClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "IMax Interface.",
                "type": "IMax"
            },
            "class": "IMinClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ISelect",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 55,
            "description": "Used to specify DISTINCT condition.",
            "itemtype": "method",
            "name": "distinct",
            "return": {
                "description": "ICount Interface.",
                "type": "ICount"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 64,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelectClause Interface.",
                "type": "ISelectClause"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 74,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 84,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelectClause Interface.",
                "type": "ISelectClause"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 94,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelectClause Interface.",
                "type": "ISelectClause"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 104,
            "description": "Used to specify ORDER BY keyword to sort the result-set.",
            "itemtype": "method",
            "name": "orderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 114,
            "description": "Used to specify ORDER BY ASC keyword to sort the result-set in ascending order.",
            "itemtype": "method",
            "name": "ascendingOrderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 124,
            "description": "Used to specify ORDER BY DESC keyword to sort the result-set in descending order.",
            "itemtype": "method",
            "name": "descendingOrderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 134,
            "description": "Used to specify the range of data need to fetch from table.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "limit",
                    "description": "LIMIT of data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 144,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 154,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelectClause Interface.",
                "type": "ISelectClause"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 164,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 174,
            "description": "Used to provide name of columns only for which data will be fetched.",
            "itemtype": "method",
            "name": "columns",
            "params": [
                {
                    "name": "column",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelect.js",
            "line": 184,
            "description": "Used to get tuples, this method should be called in last to get tuples from table.",
            "itemtype": "method",
            "name": "fetch",
            "return": {
                "description": "Return array of model objects.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while getting tuples from table."
            ],
            "class": "ISelect",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ISelectClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISelectClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ISelect Interface.",
                "type": "ISelect"
            },
            "class": "ISelectClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ISum",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 54,
            "description": "Name of Interface",
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 60,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISumClause Interface.",
                "type": "ISumClause"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 70,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 80,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "Column"
                }
            ],
            "return": {
                "description": "ISumClause Interface.",
                "type": "ISumClause"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 90,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "Column"
                }
            ],
            "return": {
                "description": "ISumClause Interface.",
                "type": "ISumClause"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 100,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 110,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISumClause Interface.",
                "type": "ISumClause"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 120,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 130,
            "description": "Used to provide name of column for which sum will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISum.js",
            "line": 140,
            "description": "Used to get sum, this method should be called in last to calculate sum.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return sum.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating sum."
            ],
            "class": "ISum",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ISumClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 50,
            "description": "Name of Interface",
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 56,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 66,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 76,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 86,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 96,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 106,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 116,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 127,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ISumClause.js",
            "line": 137,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ISum Interface.",
                "type": "ISum"
            },
            "class": "ISumClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ITotal",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 52,
            "description": "Name of Interface",
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 58,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotalClause Interface.",
                "type": "ITotalClause"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 68,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 78,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotalClause Interface.",
                "type": "ITotalClause"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 88,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotalClause Interface.",
                "type": "ITotalClause"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 98,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 108,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotalClause Interface.",
                "type": "ITotalClause"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 118,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 128,
            "description": "Used to provide name of column for which total will be calculated.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotal.js",
            "line": 138,
            "description": "Used to get total, this method should be called in last to calculate total.",
            "itemtype": "method",
            "name": "execute",
            "return": {
                "description": "Return total.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while calculating total."
            ],
            "class": "ITotal",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ITotalClause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 49,
            "description": "Name of Interface",
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 55,
            "description": "Used to specify EQUAL TO (=) condition.",
            "itemtype": "method",
            "name": "equalTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 65,
            "description": "Used to specify NOT EQUAL TO (!=) condition.",
            "itemtype": "method",
            "name": "notEqualTo",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which NOT EQUAL TO (=) condition will be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 75,
            "description": "Used to specify GREATER THAN (>) condition.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for while GREATER THAN (>) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 85,
            "description": "Used to specify GREATER THAN EQUAL (>=) condition.",
            "itemtype": "method",
            "name": "greaterThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which GREATER THAN EQUAL (>=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 95,
            "description": "Used to specify LESS THAN (<) condition.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN (<) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 105,
            "description": "Used to specify LESS THAN EQUAL (<=) condition.",
            "itemtype": "method",
            "name": "lessThanEqual",
            "params": [
                {
                    "name": "value",
                    "description": "Value for which LESS THAN EQUAL (<=) condition will be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 115,
            "description": "Used to specify BETWEEN condition.",
            "itemtype": "method",
            "name": "between",
            "params": [
                {
                    "name": "start",
                    "description": "Start Range.",
                    "type": "String"
                },
                {
                    "name": "end",
                    "description": "End Range.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 126,
            "description": "Used to specify LIKE condition.",
            "itemtype": "method",
            "name": "like",
            "params": [
                {
                    "name": "like",
                    "description": "LIKE condition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Impl\\ITotalClause.js",
            "line": 136,
            "description": "Used to specify IN condition.",
            "itemtype": "method",
            "name": "in",
            "params": [
                {
                    "name": "values",
                    "description": "Values for IN condition.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "ITotal Interface.",
                "type": "ITotal"
            },
            "class": "ITotalClause",
            "module": "Database",
            "submodule": "Impl"
        },
        {
            "file": "assets\\Siminov\\Database\\Clause.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Clause",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 39,
            "description": "It adds a record to any single table in a relational database.\n\n\t   \t<pre>\n\t   \t\nExample: Make Liquor Object\n\t\n\tvar beer = new Liquor();\n\tbeer.setLiquorType(Liquor.LIQUOR_TYPE_BEER);\n\tbeer.setDescription(beer_description));\n\tbeer.setHistory(beer_history));\n\tbeer.setLink(beer_link));\n\tbeer.setAlcholContent(beer_alchol_content));\n  \n\ttry {\n\t\tbeer.save();\n\t} catch(DatabaseException de) {\n\t\t//Log it.\n\t}\n\n\t    </pre>",
            "itemtype": "method",
            "name": "save",
            "throws": [
                "{SiminovException} If any error occurs while saving tuples in database."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 93,
            "description": "It updates a record to any single table in a relational database.\n\t\nExample: Make Beer Object\n\n\tvar beer = new Liquor();\n\tbeer.setLiquorType(Liquor.LIQUOR_TYPE_BEER);\n\tbeer.setDescription(beer_description));\n\tbeer.setHistory(beer_history));\n\tbeer.setLink(beer_link));\n\tbeer.setAlcholContent(beer_alchol_content));\n \n\ttry {\n\t\tbeer.update();\n\t} catch(DatabaseException de) {\n\t\t//Log it.\n\t}",
            "itemtype": "method",
            "name": "update",
            "throws": [
                "DatabaseException If any error occurs while saving tuples in database."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 143,
            "description": "It finds out whether tuple exists in table or not.\nIF NOT EXISTS:\n\tadds a record to any single table in a relational database.\nELSE:\n\tupdates a record to any single table in a relational database.\n\t   \t\nExample: Make Beer Object\n\n\tvar beer = new Liquor();\n\tbeer.setLiquorType(Liquor.LIQUOR_TYPE_BEER);\n\tbeer.setDescription(beer_description));\n\tbeer.setHistory(beer_history));\n\tbeer.setLink(beer_link));\n\tbeer.setAlcholContent(beer_alchol_content));\n  \n\ttry {\n\t\tbeer.saveOrUpdate();\n\t} catch(DatabaseException de) {\n\t\t//Log it.\n\t}",
            "itemtype": "method",
            "name": "saveOrUpdate",
            "throws": [
                "{SiminovException} If any error occurs while saving tuples in database."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 197,
            "description": "Fetch tuples from table.\n\n\t\tExample:\n\t\n\t\tvar liquors =  new Liquor().select()\n\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t.and(Liquor.ALCHOL_CONTENT).equalTo(\"90%\")\n\t\t\t\t\t\t.fetch();",
            "itemtype": "method",
            "name": "select",
            "return": {
                "description": "ISelect to provide extra information based on which tuples will be fetched from table.",
                "type": "ISelect"
            },
            "throws": [
                "{SiminovException} If any error occur while fetching tuples from table."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 217,
            "description": "Returns all tuples based on manual query from mapped table for invoked class object.\n\t \n\t\tExample:\n\t\t\t\n\t\t\tvar query = \"SELECT * FROM LIQUOR\";\n\t\t\t\n\t\t\tvar liquors = null;\n\t\t\ttry {\n\t\t\t\tliquors = new Liquor().select(query);\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "query",
                    "description": "Manual query on which tuples need to be fetched."
                }
            ],
            "return": {
                "description": "Array Of Objects."
            },
            "throws": [
                "SiminovException If any error occur while getting tuples from a single table."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 242,
            "description": "It deletes a record to any single table in a relational database.\n\t\nExample:\n\n\tvar beer = new Liquor();\n\tbeer.setLiquorType(Liquor.LIQUOR_TYPE_BEER);\n\tbeer.setDescription(beer_description));\n\tbeer.setHistory(beer_history));\n\tbeer.setLink(beer_link));\n\tbeer.setAlcholContent(beer_alchol_content));\n  \n\ttry {\n\t\tbeer.delete();\n\t} catch(DatabaseException de) {\n\t\t//Log it.\n\t}\n\t\t\t\n\tOR\n\t\t\t\n\ttry {\n\t\tnew Liquor().delete();\n\t} catch(DatabaseException de) {\n\t\t//Log It.\n\t}",
            "itemtype": "method",
            "name": "delete",
            "throws": [
                "{SiminovException} If any error occurs while saving tuples in database."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 277,
            "description": "Returns the average based on column name provided.\n\n\t\tExample:\n\t\t\tvar average = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\taverage = new Liquor().avg()\n\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "avg",
            "return": {
                "description": "IAverage to provide extra information based on which average will be calculated.",
                "type": "IAverage"
            },
            "throws": [
                "{SiminovException} If any error occur while finding average."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 303,
            "description": "Returns the count of rows based on information provided.\n\n\t\tExample:\n\t\t\tvar count = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tcount = new Liquor().count().\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "ICount to provide extra information based on which count will be calculated.",
                "type": "ICount"
            },
            "throws": [
                "{SiminovException} If any error occur while find count."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 328,
            "description": "Returns the minimum based on column name provided.\n\n\t\tExample:\n\t\t\tvar maximum = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tmaximum = new Liquor().max()\n\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "max",
            "return": {
                "description": "IMax to provide extra information based on which maximum will be calculated.",
                "type": "IMax"
            },
            "throws": [
                "{SiminovException} If any error occur while finding minimum."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 354,
            "description": "Returns the minimum based on column name provided.\n\n\t\tExample:\n\t\t\tvar minimum = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tminimum = new Liquor().min()\n\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "min",
            "return": {
                "description": "IMin to provide extra information based on which minimum will be calculated.",
                "type": "IMin"
            },
            "throws": [
                "{SiminovException} If any error occur while finding minimum."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 380,
            "description": "Returns the sum based on column name provided.\n\n\t\tExample:\n\t\t\tvar sum = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tsum = new Liquor().sum()\n\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "sum",
            "return": {
                "description": "ISum to provide extra information based on which sum will be calculated.",
                "type": "ISum"
            },
            "throws": [
                "{SiminovException} If any error occur while finding sum."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 406,
            "description": "Returns the total based on column name provided.\n\n\t\tExample:\n\t\t\tvar total = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\ttotal = new Liquor().total()\n\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t.execute();\n\t\t\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "total",
            "return": {
                "description": "ITotal to provide extra information based on which total will be calculated.",
                "type": "ITotal"
            },
            "throws": [
                "{SiminovException} If any error occur while finding total."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 432,
            "description": "Returns the group concat based on column name provided.\n\n\t\tExample:\n\t\t\tvar groupConcat = 0;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tgroupConcat = new Liquor().groupConcat()\n\t\t\t\t\t\t\t\t.column(Liquor.COLUMN_NAME_WHICH_CONTAIN_NUMBRIC_VALUE)\n\t\t\t\t\t\t\t\t.where(Liquor.LIQUOR_TYPE).equalTo(\"RUM\")\n\t\t\t\t\t\t\t\t.execute();\n\t\t\t\t\t\t\t\t\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "groupConcat",
            "return": {
                "description": "IGroupConcat to provide extra information based on which group concat will be calculated.",
                "type": "IGroupConcat"
            },
            "throws": [
                "SiminovException If any error occur while finding group concat."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 458,
            "description": "Returns the mapped table name for invoked class object.\n\t \n\t\tExample:\n\t\t\tvar tableName = null;\n\t\t\ttry {\n\t\t\t\ttableName = new Liquor().getTableName();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getTableName",
            "return": {
                "description": "Mapped Table name.",
                "type": "String"
            },
            "throws": [
                "{SiminovException} If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 511,
            "description": "Returns all column names of mapped table.\n\n\t\tExample:\n\t\t\tvar columnNames = null;\n\t\t\ttry {\n\t\t\t\tcolumnNames = new Liquor().getColumnNames();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getColumnNames",
            "return": {
                "description": "All column names of mapped table.",
                "type": "Array"
            },
            "throws": [
                "{SiminovException} If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 565,
            "description": "Returns all columns with there data types for invoked class object.\n\t\n\t\tExample:\n\t\t\tvar columnTypes = null;\n\t\t\ttry {\n\t\t\t\tcolumnTypes = new Liquor().getColumnTypes();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getColumnTypes",
            "return": {
                "description": "All columns with there data types.",
                "type": "Dictionary"
            },
            "throws": [
                "{SiminovException} If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 627,
            "description": "Returns all primary keys of mapped table for invoked class object.\n\n\t\tExample:\n\t\t\tvar primaryKeys = null;\n\t\t\ttry {\n\t\t\t\tprimaryKeys = new Liquor().getPrimeryKeys();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getPrimaryKeys",
            "return": {
                "description": "All primary keys.",
                "type": "Array"
            },
            "throws": [
                "{SiminovException} If not mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 681,
            "description": "Returns all mandatory fields which are associated with mapped table for invoked class object.\n\t \n\t\tExample:\n\t\t\tvar mandatoryFields = null;\n\t\t\ttry {\n\t\t\t\tmandatoryFields = new Liquor().getMandatoryFields();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getMandatoryFields",
            "return": {
                "description": "All mandatory fields for mapped table.",
                "type": "Array"
            },
            "throws": [
                "SiminovException If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 734,
            "description": "Returns all unique fields which are associated with mapped table for invoked class object.\n\t \n\t\tExample:\n\t\t\t \t\t\t\n\t\t\tvar uniqueFields = null;\n\t\t\ttry {\n\t\t\t\tuniqueFields = new Liquor().getUniqueFields();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getUniqueFields",
            "return": {
                "description": "All unique fields for mapped table.",
                "type": "Array"
            },
            "throws": [
                "{SiminovException} If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 789,
            "description": "Returns all foreign keys of mapped table for invoked class object.\n\t \n\t\tExample:\n\t\t\t \t\t\t\n\t\t\tvar foreignKeys = null;\n\t\t\ttry {\n\t\t\t\tforeignKeys = new Liquor().getForeignKeys();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getForeignKeys",
            "return": {
                "description": "All foreign keys of mapped table.",
                "type": "Array"
            },
            "throws": [
                "{SiminovException} If no mapped table found for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 844,
            "description": "Returns database descriptor object based on the POJO class called.\n\n\t\tExample:\n\t\t\n\t\t\ttry {\n\t\t\t\tDatabaseDescriptor databaseDescriptor = new Liquor().getDatabaseDescriptor();\n\t\t\t} catch(DatabaseException databaseException) {\n\t\t\t\t//Log It.\n\t\t\t}",
            "itemtype": "method",
            "name": "getDatabaseDescriptor",
            "return": {
                "description": "Database Descriptor Object.",
                "type": "DatabaseDescriptor"
            },
            "throws": [
                "{SiminovException} If any error occur while getting database descriptor object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Database.js",
            "line": 869,
            "description": "Returns the actual database mapping object mapped for invoked class object.\n\t \n\t\tExample:\n\t\t\tDatabaseMapping databaseMapping = null;\n\t\t\ttry {\n\t\t\t\tdatabaseMapping = new Liquor().getDatabaseMapping();\n\t\t\t} catch(DatabaseException de) {\n\t\t\t\t//Log it.\n\t\t\t}",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptor",
            "return": {
                "description": "Database Mapping Descriptor Object",
                "type": "DatabaseMappingDescriptor"
            },
            "throws": [
                "{SiminovException} If database mapping object not mapped for invoked class object."
            ],
            "class": "Database",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 56,
            "description": "Used to specify DISTINCT condition.",
            "itemtype": "method",
            "name": "distinct",
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 69,
            "description": "Column name of which condition will be specified.",
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Clause Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 84,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "whereClause",
            "params": [
                {
                    "name": "whereClause",
                    "description": "Manually created where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 97,
            "description": "Used to specify AND condition between where clause.",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Clause Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 110,
            "description": "Used to specify OR condition between where clause.",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be specified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Clause Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 123,
            "description": "Used to specify ORDER BY keyword to sort the result-set.",
            "itemtype": "method",
            "name": "orderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "OBJECT"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 136,
            "description": "Used to specify ORDER BY ASC keyword to sort the result-set in ascending order.",
            "itemtype": "method",
            "name": "ascendingOrderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 151,
            "description": "Used to specify ORDER BY DESC keyword to sort the result-set in descending order.",
            "itemtype": "method",
            "name": "descendingOrderBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns which need to be sorted.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 166,
            "description": "Used to specify the range of data need to fetch from table.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "limit",
                    "description": "LIMIT of data.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 179,
            "description": "Used to specify GROUP BY statement in conjunction with the aggregate functions to group the result-set by one or more columns.",
            "itemtype": "method",
            "name": "groupBy",
            "params": [
                {
                    "name": "columns",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 192,
            "description": "Used to specify HAVING clause to SQL because the WHERE keyword could not be used with aggregate functions.",
            "itemtype": "method",
            "name": "having",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column on which condition need to be applied.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Clause Interface Implementation.",
                "type": "Clause"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 207,
            "description": "Used to provide manually created Where clause, instead of using API's.",
            "itemtype": "method",
            "name": "havingClause",
            "params": [
                {
                    "name": "havingClause",
                    "description": "Where clause.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 220,
            "description": "Used to provide name of column only for which data will be fetched.",
            "itemtype": "method",
            "name": "column",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 233,
            "description": "Used to provide name of columns only for which data will be fetched.",
            "itemtype": "method",
            "name": "columns",
            "params": [
                {
                    "name": "column",
                    "description": "Name of columns.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Select Interface Implementation.",
                "type": "Object"
            },
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 252,
            "description": "Process the request specified by application.",
            "itemtype": "method",
            "name": "execute",
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Database\\Select.js",
            "line": 321,
            "description": "Used to get tuples, this method should be called in last to get tuples from table.",
            "itemtype": "method",
            "name": "fetch",
            "return": {
                "description": "Return array of model objects.",
                "type": "Object"
            },
            "throws": [
                "{SiminovException} Throws exception if any error occur while getting tuples from table."
            ],
            "class": "Select",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Events\\EventHandler.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "SiminovException",
            "module": "Database"
        },
        {
            "file": "assets\\Siminov\\Events\\EventHandler.js",
            "line": 28,
            "description": "Handle event triggered by Siminov.",
            "itemtype": "method",
            "name": "triggerEvent",
            "class": "SiminovException",
            "module": "EventHandler"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "SiminovException",
            "module": "EventHandler"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 43,
            "description": "Get POJO class name.",
            "itemtype": "method",
            "name": "getClassName",
            "return": {
                "description": "POJO Class Name."
            },
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 54,
            "description": "Set POJO class name.",
            "itemtype": "method",
            "name": "setClassName",
            "params": [
                {
                    "name": "className",
                    "description": "POJO Class Name."
                }
            ],
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 65,
            "description": "Get method Name.",
            "itemtype": "method",
            "name": "getMethodName",
            "return": {
                "description": "Name Of Method."
            },
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 76,
            "description": "Set method Name.",
            "itemtype": "method",
            "name": "setMethodName",
            "params": [
                {
                    "name": "methodName",
                    "description": "Name Of Method."
                }
            ],
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 87,
            "description": "Get message.",
            "itemtype": "method",
            "name": "getMessage",
            "return": {
                "description": "Message."
            },
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovException.js",
            "line": 98,
            "description": "Set message.",
            "itemtype": "method",
            "name": "setMessage",
            "params": [
                {
                    "name": "message",
                    "description": "Message."
                }
            ],
            "class": "SiminovException",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovExceptionHandler.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovExceptionHandler.js",
            "line": 19,
            "description": "Any exception thrown from NATIVE-TO-WEB is handled and show to user.",
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Exception\\SiminovExceptionHandler.js",
            "line": 24,
            "description": "Display error to user.",
            "itemtype": "method",
            "name": "display",
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Log\\Log.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Log\\Log.js",
            "line": 33,
            "description": "Log info messages.",
            "itemtype": "method",
            "name": "logi",
            "static": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Class Name."
                },
                {
                    "name": "methodName",
                    "description": "Method Name."
                },
                {
                    "name": "message",
                    "description": "Message."
                }
            ],
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Log\\Log.js",
            "line": 48,
            "description": "Log error messages.",
            "itemtype": "method",
            "name": "loge",
            "static": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Class Name."
                },
                {
                    "name": "methodName",
                    "description": "Method Name."
                },
                {
                    "name": "message",
                    "description": "Message."
                }
            ],
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Log\\Log.js",
            "line": 63,
            "description": "Log debug messages.",
            "itemtype": "method",
            "name": "logd",
            "static": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Class Name."
                },
                {
                    "name": "methodName",
                    "description": "Method Name."
                },
                {
                    "name": "message",
                    "description": "Message."
                }
            ],
            "class": "Log",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 55,
            "description": "Get Application Descriptor Name as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Application Descriptor Name.",
                "type": "String"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 65,
            "description": "Set Application Descriptor Name as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Application Descriptor.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 75,
            "description": "Set Description of Application as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Description of application.",
                "type": "String"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 85,
            "description": "Set Description of Application as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "description",
                    "description": "Description of application.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 95,
            "description": "Get Version of Application as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "Version of application.",
                "type": "String"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 105,
            "description": "Set Version of Application as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setVersion",
            "params": [
                {
                    "name": "version",
                    "description": "Version of application.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 115,
            "description": "Set load initially to true or false.",
            "itemtype": "method",
            "name": "setLoadInitially",
            "params": [
                {
                    "name": "initialLoad",
                    "description": "(true/false) defined by ApplicationDescriptor.si.xml file.",
                    "type": "Boolean"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 125,
            "description": "It defines the behaviour of SIMINOV. (Should core load all database mapping at initialization or on demand).",
            "itemtype": "method",
            "name": "getLoadInitially",
            "return": {
                "description": "(true/false) TRUE: If load initially is set to true, FALSE: If load initially is set to false.",
                "type": "Boolean"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 136,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 147,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 159,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 171,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 183,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 194,
            "description": "Add Database Descriptor path as per contained in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "addDatabaseDescriptorPath",
            "params": [
                {
                    "name": "databaseDescriptorPath",
                    "description": "DatabaseDescriptor path.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 204,
            "description": "Get all database descriptor paths as per contained in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDatabaseDescriptorPaths",
            "return": {
                "description": "It which contains all database descriptor paths.",
                "type": "Array"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 214,
            "description": "Get all event handlers as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getEvents",
            "return": {
                "description": "All event handlers defined in ApplicationDescriptor.si.xml file",
                "type": "Array"
            },
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\ApplicationDescriptor.js",
            "line": 224,
            "description": "Add event as per defined in ApplicationDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "addEvent",
            "params": [
                {
                    "name": "event",
                    "description": "Event Handler class name.",
                    "type": "String"
                }
            ],
            "class": "ApplicationDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 56,
            "description": "Get database descriptor name as defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDatabaseName",
            "return": {
                "description": "Database Descriptor Name.",
                "type": "String"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 66,
            "description": "Set database descriptor name as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setDatabaseName",
            "params": [
                {
                    "name": "databaseName",
                    "description": "Database Descriptor Name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 76,
            "description": "Get description as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Description defined in DatabaseDescriptor.si.xml file.",
                "type": "String"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 86,
            "description": "Set description as per defined in DatabaseDescritor.xml file.",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "description",
                    "description": "Description defined in DatabaseDescriptor.si.xml file.",
                    "type": "String"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 96,
            "description": "Set database locking as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setLockingRequired",
            "params": [
                {
                    "name": "isLockingRequired",
                    "description": "(true/false) database locking as per defined in DatabaseDescriptor.si.xml file.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 106,
            "description": "Check whether database transactions to make multi-threading safe or not.",
            "itemtype": "method",
            "name": "isLockingRequired",
            "return": {
                "description": "(true/false) TRUE: If locking is required as per defined in DatabaseDescriptor.si.xml file, FALSE: If locking is not required as per defined in DatabaseDescriptor.si.xml file.",
                "type": "Boolean"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 116,
            "description": "Set the external storage value as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "setExternalStorage",
            "params": [
                {
                    "name": "isExternalStorageEnable",
                    "description": "(true/false) External Storage Enable Or Not.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 126,
            "description": "Check whether database needs to be stored on SDCard or not.",
            "itemtype": "method",
            "name": "isExternalStorage",
            "return": {
                "description": "(true/false) TRUE: If external_storage defined as true in DatabaseDescriptor.si.xml file, FALSE: If external_storage defined as false in DatabaseDescritor.xml file.",
                "type": "Boolean"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 137,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 148,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 160,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 172,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 184,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 195,
            "description": "Get all database mapping paths as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptorPaths",
            "return": {
                "description": "It contain all database mapping paths.",
                "type": "Array"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 205,
            "description": "Add database mapping path as per defined in DatabaseDescriptor.si.xml file.\n\t\n\t\tEXAMPLE:\n\t\t\t<database-descriptor>\n\t\t\t\t<database-mappings>\n\t\t\t\t\t<database-mapping path=\"Liquor-Mappings/Liquor.xml\" />\n\t\t\t\t\t<database-mapping path=\"Liquor-Mappings/LiquorBrand.xml\" />\n\t\t\t\t</database-mappings>\n\t\t\t</database-descriptor>",
            "itemtype": "method",
            "name": "addDatabaseMappingDescriptorPath",
            "params": [
                {
                    "name": "databaseMappingPath",
                    "description": "Database Mapping Path."
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 223,
            "description": "Get all library paths as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getLibraryPaths",
            "return": {
                "description": "It contains all library paths.",
                "type": "Array"
            },
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseDescriptor.js",
            "line": 233,
            "description": "Add library path as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "addLibraryPath",
            "params": [
                {
                    "name": "libraryPath",
                    "description": "Library path defined in DatabaseDescriptor.si.xml file.",
                    "type": "String"
                }
            ],
            "class": "DatabaseDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 80,
            "description": "Get table name.",
            "itemtype": "method",
            "name": "getTableName",
            "return": {
                "description": "Name of table.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 90,
            "description": "Set table name as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setTableName",
            "params": [
                {
                    "name": "tableName",
                    "description": "Name of table."
                }
            ],
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 100,
            "description": "Get Function class name.",
            "itemtype": "method",
            "name": "getClassName",
            "return": {
                "description": "POJO class name.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 110,
            "description": "Set Function class name as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setClassName",
            "params": [
                {
                    "name": "className",
                    "description": "POJO class name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 120,
            "description": "Get all columns.",
            "itemtype": "method",
            "name": "getColumns",
            "return": {
                "description": "All columns.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 130,
            "description": "Add column to DatabaseMapping object.",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "column",
                    "description": "Column object.",
                    "type": "Column"
                }
            ],
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 140,
            "description": "Get all indexes.",
            "itemtype": "method",
            "name": "getIndexes",
            "return": {
                "description": "It contain all indexes.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 150,
            "description": "Add index to DatabaseMapping object.",
            "itemtype": "method",
            "name": "addIndex",
            "params": [
                {
                    "name": "index",
                    "description": "Index object.",
                    "type": "Index"
                }
            ],
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 160,
            "description": "Get iterator of relationship objects.",
            "itemtype": "method",
            "name": "getRelationship",
            "return": {
                "description": "Relationship objects.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 170,
            "description": "Add relationship object.",
            "itemtype": "method",
            "name": "addRelationship",
            "params": [
                {
                    "name": "relationship",
                    "description": "Relationship object.",
                    "type": "Relationship"
                }
            ],
            "class": "DatabaseMappingDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 207,
            "description": "Get variable name.",
            "itemtype": "method",
            "name": "getVariableName",
            "return": {
                "description": "Variable Name",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 217,
            "description": "Set variable name as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setVariableName",
            "params": [
                {
                    "name": "variableName",
                    "description": "Name of variable.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 227,
            "description": "Get column name.",
            "itemtype": "method",
            "name": "getColumnName",
            "return": {
                "description": "Name Of Column.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 237,
            "description": "Set column name as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setColumnName",
            "params": [
                {
                    "name": "columnName",
                    "description": "Name of column name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 247,
            "description": "Get type of column.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Type of column.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 257,
            "description": "Set type of column as per defined in DatabaseMapping.core.xml file.",
            "methof": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "Type of column.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 267,
            "description": "Get check constraint of column.",
            "itemtype": "method",
            "name": "getCheck",
            "return": {
                "description": "Check constraint of column.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 277,
            "description": "Set check constraint of column as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setCheck",
            "params": [
                {
                    "name": "check",
                    "description": "Check constraint.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 287,
            "description": "Get default value of column.",
            "itemtype": "method",
            "name": "getDefaultValue",
            "return": {
                "description": "Default value of column."
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 297,
            "description": "Set default value of column as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setDefaultValue",
            "params": [
                {
                    "name": "defaultValue",
                    "description": "Default value of column.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 307,
            "description": "Set column as primary key or not.",
            "itemtype": "method",
            "name": "setPrimary",
            "params": [
                {
                    "name": "primaryKey",
                    "description": "(true/false) TRUE: If column is primary key, FALSE: If column is not primary key.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 317,
            "description": "Check whether column is primary key.",
            "itemtype": "method",
            "name": "isPrimaryKey",
            "return": {
                "description": "(true/false) TRUE: If column is primary key, FALSE: If column is not primary key.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 327,
            "description": "Set whether column can be null or not.",
            "itemtype": "method",
            "name": "setNotNull",
            "params": [
                {
                    "name": "isNotNull",
                    "description": "(true/false) TRUE: If column value can be null, FALSE: If column value can not be null.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 337,
            "description": "Check whether column value can be not or not.",
            "itemtype": "method",
            "name": "isNotNull",
            "return": {
                "description": "(true/false) TRUE: If column value can be null, FALSE: If column value can not be null.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 347,
            "description": "Set whether column is unique or not.",
            "itemtype": "method",
            "name": "setUnique",
            "params": [
                {
                    "name": "isUnique",
                    "description": "(true/false) TRUE: If column is unique, FALSE: If column is not unique",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 357,
            "description": "Check whether column is unique or not.",
            "itemtype": "method",
            "name": "isUnique",
            "return": {
                "description": "(true/false) TRUE: If column is unique, FALSE: If column is not unique.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 368,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 379,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 391,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 403,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 415,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Column",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 450,
            "description": "Get index name.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Index Name.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 460,
            "description": "Set index name as per defined in DatabaseMapping.core.xml file.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "Index Name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 470,
            "description": "Set whether unqiue is unique or not.",
            "itemtype": "method",
            "name": "setUnique",
            "params": [
                {
                    "name": "unique",
                    "description": "(true/false) TRUE: If index is unique, FALSE: If index is not unique.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 480,
            "description": "Check whether index should be unique or not.",
            "itemtype": "method",
            "name": "isUnique",
            "return": {
                "description": "(true/false) TRUE: If index is unique, FALSE: If index is not unqiue.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 493,
            "description": "Get all columns.",
            "itemtype": "method",
            "name": "getColumns",
            "return": {
                "description": "It contain all columns.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 503,
            "description": "Add column to index.",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "column",
                    "description": "Name of column.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Index",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 536,
            "description": "Get relationship type.",
            "itemtype": "method",
            "name": "getRelationshipType",
            "return": {
                "description": "Type of relationship.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 546,
            "description": "Set relationship type.",
            "itemtype": "method",
            "name": "setRelationshipType",
            "params": [
                {
                    "name": "relationshipType",
                    "description": "Type of relationship.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 556,
            "description": "Get refer.",
            "itemtype": "method",
            "name": "getRefer",
            "return": {
                "description": "Name of refer.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 566,
            "description": "Set refer.",
            "itemtype": "method",
            "name": "setRefer",
            "params": [
                {
                    "name": "refer",
                    "description": "Name of refer.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 576,
            "description": "Get refer to.",
            "itemtype": "method",
            "name": "getReferTo",
            "return": {
                "description": "Name of refer to.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 586,
            "description": "Set refer to.",
            "itemtype": "method",
            "name": "setReferTo",
            "params": [
                {
                    "name": "referTo",
                    "description": "Name of refer to.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 596,
            "description": "Get on update.",
            "itemtype": "method",
            "name": "getOnUpdate",
            "return": {
                "description": "Action on update.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 606,
            "description": "Set on update.",
            "itemtype": "method",
            "name": "setOnUpdate",
            "params": [
                {
                    "name": "onUpdate",
                    "description": "Action on update.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 616,
            "description": "Get on delete.",
            "itemtype": "method",
            "name": "getOnDelete",
            "return": {
                "description": "Action on delete.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 626,
            "description": "Set on delete.",
            "itemtype": "method",
            "name": "setOnDelete",
            "params": [
                {
                    "name": "onDelete",
                    "description": "Action on delete.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 636,
            "description": "Get getter refer method name.",
            "itemtype": "method",
            "name": "getGetterReferMethodName",
            "return": {
                "description": "Getter refer method name.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 646,
            "description": "Set getter refer method name.",
            "itemtype": "method",
            "name": "setGetterReferMethodName",
            "params": [
                {
                    "name": "getterReferMethodName",
                    "description": "Name of getter refer method name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 656,
            "description": "Get setter refer method name.",
            "itemtype": "method",
            "name": "getSetterReferMethodName",
            "return": {
                "description": "Name of setter refer method name.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 666,
            "description": "Set setter refer method name.",
            "itemtype": "method",
            "name": "setSetterReferMethodName",
            "params": [
                {
                    "name": "setterReferMethodName",
                    "description": "Name of setter refer name.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 676,
            "description": "Set load property value.",
            "itemtype": "method",
            "name": "setLoad",
            "params": [
                {
                    "name": "load",
                    "description": "(true/false) TRUE: If load property value is true; FALSE: If load property value is false.",
                    "type": "Boolean"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 686,
            "description": "Check whether load property value is set to TRUE/FASLE.",
            "itemtype": "method",
            "name": "isLoad",
            "return": {
                "description": "(true/false) TRUE: If load property value is set to true; FALSE: If load property value is set to false.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 697,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 708,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 720,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 732,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\DatabaseMappingDescriptor.js",
            "line": 744,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "DatabaseMappingDescriptor.Relationship",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 18,
            "description": "<hybrid-descriptor>\n\t\n\t    <!-- Adapter -->\n\t    <adapter>\n\t        \n\t        <!-- General Adapter Properties -->\n\t        \t<!-- Mandatory Field -->\n\t        <property name=\"name\">adapter_name</property>\n\t        \t\n\t        \t<!-- Optional Field -->\n\t        <property name=\"description\">adapter_description</property>\n\t        \n\t        \t<!-- Mandatory Field -->\n\t        <property name=\"type\">WEB-TO-NATIVE|NATIVE-TO-WEB</property>\n\t        \n\t        \t<!-- Optional Field -->\n\t        <property name=\"map_to\">name_of_adapter_class</property>\n\t\n\t        \t<!-- Optional Field (DEFAULT: FALSE)-->\n\t        <property name=\"cache\">true/false</property>\n\t\n\t        \t<!-- Optional Error Handler -->\n\t        <property name=\"error_handler\">error_handler_id</property>\n\t        \n\t        <!-- Handlers -->\n\t        \t<!-- Handler -->\n\t        <handlers>\n\t            \n\t\t        <handler>\n\t\t            \n\t\t            <!-- General Handler Properties -->\n\t\t            \t<!-- Mandatory Field -->\n\t\t            <property name=\"name\">handler_name</property>\n\t\t            \n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"type\">SYNC|ASYNC</property>\n\t\t            \n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"callback_id\">callback_adapter_name</property>\n\t\t\n\t\t            \t<!-- Mandatory Field -->\n\t\t            <property name=\"map_to\">name_of_handler_method</property>\t            \n\t\n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"description\">handler_description</property>\t            \n\t\n\t\t\t       \t\t<!-- Optional Error Handler -->\n\t\t\t       \t<property name=\"error_handler\">error_handler_id</property>\n\t\t\t            \t            \n\t\t            \t            \t           \n\t\t            <!-- Parameters -->\n\t\t            <parameters>\n\t\t                <!-- Parameter -->\n\t\t                <parameter>\n\t\t                    \n\t\t                    \t<!-- Mandatory Field -->\n\t\t                    <property name=\"type\">parameter_type</property>\n\t\t                    \n\t\t                    \t<!-- Optional Field -->\n\t\t                    <property name=\"description\">description_of_parameter</property>\n\t\t                    \n\t\t                </parameter>\n\t\t                \n\t\t            </parameters>\n\t\t            \n\t\t            <return>\n\t\t                \n\t\t                \t<!-- Mandatory Field -->\n\t\t                <property name=\"type\">return_type</property>\n\t\t                \n\t\t                \t<!-- Optional Field -->\n\t\t                <property name=\"description\">return_data_description</property>\n\t\t                \n\t\t            </return>\n\t\t            \n\t\t        </handler>\n\t\t            \n\t        </handlers>\n\t\n\t    </adapter>\n\t    \n\t\n\t    <!-- Adapter Paths -->\n\t    <adapter path=\"adapter_path\" />\n\t    \n\t\n\t    <!-- Library Needed Under This HybridDescriptor -->\n\t    <libraries>\n\t        \n\t        <library>full_path_of_library_descriptor_file</library>\n\t        \n\t    </libraries>\n\t    \n\t</hybrid-descriptor>",
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 126,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 136,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 147,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 158,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 169,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 179,
            "description": "Get All Adapters. Defined in HybridDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getAdapters",
            "return": {
                "description": "All Adapters.",
                "type": "Array"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 189,
            "description": "Get Adapter based on name.",
            "itemtype": "method",
            "name": "addAdapter",
            "params": [
                {
                    "name": "adapterName",
                    "description": "Name of Adapter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Adapter.",
                "type": "Adapter"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 200,
            "description": "Get Adapter based on adapter path.",
            "itemtype": "method",
            "name": "getAdapterPaths",
            "return": {
                "description": "Adapter.",
                "type": "Adapter"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 211,
            "description": "Path of Adapter.",
            "itemtype": "method",
            "name": "addAdapterPath",
            "params": [
                {
                    "name": "Path",
                    "description": "of Adapter"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 221,
            "description": "Get all Libraries.",
            "itemtype": "method",
            "name": "getLibraries",
            "return": {
                "description": "All Libraries"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 231,
            "description": "Add Library.",
            "itemtype": "method",
            "name": "addLibrary",
            "params": [
                {
                    "name": "Library",
                    "description": ""
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 296,
            "description": "Get Name of Adapter.",
            "return": {
                "description": "Name of Adapter."
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 304,
            "description": "Set Name of Adapter.",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Adapter."
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 312,
            "description": "Get Description of Adapter.",
            "return": {
                "description": "Description of Adapter."
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 320,
            "description": "Set Description of Adapter.",
            "params": [
                {
                    "name": "description",
                    "description": "Description of Adapter."
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 328,
            "description": "Get Type of Adapter.",
            "return": {
                "description": "Type of Adapter."
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 336,
            "description": "Set Type of Adapter.",
            "params": [
                {
                    "name": "type",
                    "description": "Type of Adapter."
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 344,
            "description": "Get Map To Name.",
            "return": {
                "description": "Map To Name."
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 352,
            "description": "Set Map To Name.",
            "params": [
                {
                    "name": "mapTo",
                    "description": "Map To Name."
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 360,
            "description": "Check whether cache is enabled or disabled.",
            "return": {
                "description": "true/false; TRUE if cache enabled, FALSE if cache disabled."
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 368,
            "description": "Set Cache value.",
            "params": [
                {
                    "name": "cache",
                    "description": "Cache Enabled or Disabled."
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 377,
            "description": "Get All Handler defined in descriptors.",
            "itemtype": "method",
            "name": "getHandlers",
            "return": {
                "description": "All Handlers.",
                "type": "Array"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 387,
            "description": "Add Handler.",
            "itemtype": "method",
            "name": "getHandlers",
            "params": [
                {
                    "name": "handler",
                    "description": "Handler.",
                    "type": "Handler"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 397,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 407,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 418,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 429,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 440,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 466,
            "description": "Get Name of Handler.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of Handler.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 476,
            "description": "Set Name of Handler.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "Name of handler.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 487,
            "description": "Get Description about Handler.",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Description about Handler.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 497,
            "description": "Set Description about Handler.",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "description",
                    "description": "Description about Handler.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 507,
            "description": "Get Map To Name.",
            "itemtype": "method",
            "name": "getMapTo",
            "return": {
                "description": "Map To Name.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 517,
            "description": "Set Map To Name.",
            "itemtype": "method",
            "name": "setMapTo",
            "params": [
                {
                    "name": "mapTo",
                    "description": "Map To Name.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 528,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 538,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 549,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 560,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 571,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescriptor.Adapter.Handler",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 594,
            "description": "Get Name of Parameter.",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Name of Parameter.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 604,
            "description": "Set Name of Parameter.",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Parameter.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 614,
            "description": "Get Type of Parameter.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Type of Parameter.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 624,
            "description": "Get Type of Parameter.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "Type of Parameter.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 635,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 645,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 656,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 667,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 678,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 691,
            "description": "Exposes methods to GET and SET Return information as per define in HybridDescriptor.si.xml file or in standalone adapter xml file in application.",
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 699,
            "description": "Get Description about Return.",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Description about Return.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 709,
            "description": "Set Description about Return.",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "description",
                    "description": "Description about Return.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 719,
            "description": "Get Type of Return.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Type of Return.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 729,
            "description": "Set Type of Return.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "Type of Return.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 739,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 749,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 760,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 771,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridDescriptor.js",
            "line": 782,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "HybridDescription.Adapter.Handler.Parameter",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "HybridSiminovDatas",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 42,
            "description": "Get Hybrid Siminov Datas.",
            "itemtype": "method",
            "name": "getHybridSiminovDatas",
            "return": {
                "description": "Hybrid Siminov Datas."
            },
            "class": "HybridSiminovDatas",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 52,
            "description": "Get Hybrid Siminov Data based on Data Type provided.",
            "itemtype": "method",
            "name": "addHybridSiminovData",
            "params": [
                {
                    "name": "dataType",
                    "description": "Data Type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Hybrid Siminov Datas.",
                "type": "String"
            },
            "class": "HybridSiminovDatas",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 87,
            "description": "Get Data Type of Data.",
            "itemtype": "method",
            "name": "getDataType",
            "return": {
                "description": "Data Type of Data.",
                "type": "String"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 97,
            "description": "Set Data Type of Data.",
            "itemtype": "method",
            "name": "setDataType",
            "params": [
                {
                    "name": "dataType",
                    "description": "Data Type of Data.",
                    "type": "String"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 107,
            "description": "Get Data Value of Data.",
            "itemtype": "method",
            "name": "getDataValue",
            "return": {
                "description": "Data Value of Data.",
                "type": "String"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 117,
            "description": "Set Data Value of Data.",
            "itemtype": "method",
            "name": "setDataValue",
            "params": [
                {
                    "name": "dataValue",
                    "description": "Data Value of Data.",
                    "type": "String"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 127,
            "description": "Get All Values contain within Data.",
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "All Values.",
                "type": "Array"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 137,
            "description": "Add Value.",
            "itemtype": "method",
            "name": "addValue",
            "params": [
                {
                    "name": "hybridSiminovValue",
                    "description": "Hybrid Siminov Value.",
                    "type": "HybridSiminovDatas.HybridSiminovData.HybridSiminovValue"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 147,
            "description": "Remove Hybrid Siminov Value.",
            "itemtype": "method",
            "name": "removeValue",
            "params": [
                {
                    "name": "hybridSiminovValue",
                    "description": "Hybrid Siminov Value.",
                    "type": "HybridSiminovDatas.HybridSiminovData.HybridSiminovValue"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 161,
            "description": "Check whether Hybrid Siminov Value exist or not.",
            "itemtype": "method",
            "name": "containValue",
            "params": [
                {
                    "name": "hybridSiminovValue",
                    "description": "Hybrid Siminov Value.",
                    "type": "HybridSiminovDatas.HybridSiminovData.HybridSiminovValue"
                }
            ],
            "return": {
                "description": "true/false; TRUE if Hybrid Siminov Value exist, FALSE if Hybrid Siminov Value does not exist.",
                "type": "Boolean"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 172,
            "description": "Get All Hybrid Siminov Data.",
            "itemtype": "method",
            "name": "getDatas",
            "return": {
                "description": "All Hybrid Siminov Data.",
                "type": "Array"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 182,
            "description": "Add Hybrid Siminon Data.",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "hybridSiminovData",
                    "description": "Hybrid Siminov Data.",
                    "type": "HybridSiminovDatas.HybridSiminovData.HybridSiminovValue"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 192,
            "description": "Remove Hybrid Siminov Data.",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "hybridSiminovData",
                    "description": "Hybrid Siminov Data.",
                    "type": "HybridSiminovDatas.HybridSiminovData"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 204,
            "description": "Check whether Hybrid Siminov Data exist or not.",
            "itemtype": "method",
            "name": "containData",
            "params": [
                {
                    "name": "hybridSiminovData",
                    "description": "Hybrid Siminov Data.\n\t * @return {boolean} true/false; TRUE if Hybrid Siminov Data exist, FALSE if Hybrid Siminov Data does not exist.",
                    "type": "HybridSiminovDatas.HybridSiminovData"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 220,
            "description": "Exposes methods to GET and SET Siminov Hybrid Value structure.",
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 228,
            "description": "Get Type of Hybrid Siminov Value.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Type of Hybrid Siminov Value.",
                "type": "String"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 239,
            "description": "Set Type of Hybrid Siminov Value.",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "Type of Hybrid Siminov Value.",
                    "type": "String"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 250,
            "description": "Get Value of Hybrid Siminov Value.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Value of Hybrid Siminov Value.",
                "type": "String"
            },
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\HybridSiminovDatas.js",
            "line": 261,
            "description": "Set Value of Hybrid Siminov Value.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Value of Hybrid Siminov Value.",
                    "type": "String"
                }
            ],
            "class": "HybridSiminovDatas.HybridSiminovData",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 52,
            "description": "Get library name.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of Library",
                "type": "String"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 62,
            "description": "Set library name as per defined in LibraryDescriptor.si.xml",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Library",
                    "type": "String"
                }
            ],
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 72,
            "description": "Get descriptor as per defined in LibraryDescriptor.si.xml",
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Description of Library",
                "type": "String"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 82,
            "description": "Set description as per defined in LibraryDescritor.core.xml",
            "itemtype": "method",
            "name": "setDescription",
            "params": [
                {
                    "name": "descriptor",
                    "description": "Description of Library",
                    "type": "String"
                }
            ],
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 93,
            "description": "Get all Properties defined in descriptor.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "All Property Values.",
                "type": "Array"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 104,
            "description": "Get Property based on name provided.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property value.",
                "type": "String"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 116,
            "description": "Check whether Property exist or not.",
            "itemtype": "method",
            "name": "containProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true/false, TRUE if property exist, FALSE if property does not exist.",
                "type": "Boolean"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 128,
            "description": "Add Property in property pool.",
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of Property.",
                    "type": "String"
                }
            ],
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 140,
            "description": "Remove Property from property pool.",
            "itemtype": "method",
            "name": "removeProperty",
            "params": [
                {
                    "name": "name",
                    "description": "Name of Property.",
                    "type": "String"
                }
            ],
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 151,
            "description": "Get all database mapping paths as per defined in DatabaseDescriptor.si.xml file.",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptorPaths",
            "return": {
                "description": "It contain all database mapping paths.",
                "type": "Array"
            },
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Model\\LibraryDescriptor.js",
            "line": 161,
            "description": "Add database mapping path as per defined in DatabaseDescriptor.si.xml file.\n\t\n\t\tEXAMPLE:\n\t\t\t<database-descriptor>\n\t\t\t\t<database-mappings>\n\t\t\t\t\t<database-mapping path=\"Liquor-Mappings/Liquor.xml\" />\n\t\t\t\t\t<database-mapping path=\"Liquor-Mappings/LiquorBrand.xml\" />\n\t\t\t\t</database-mappings>\n\t\t\t</database-descriptor>",
            "itemtype": "method",
            "name": "addDatabaseMappingDescriptorPath",
            "params": [
                {
                    "name": "databaseMappingPath",
                    "description": "Database Mapping Path.",
                    "type": "String"
                }
            ],
            "class": "LibraryDescriptor",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "SIDatasHelper",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "line": 30,
            "description": "Convert SI Datas to Models.",
            "itemtype": "method",
            "name": "toModels",
            "static": 1,
            "class": "SIDatasHelper",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "line": 54,
            "description": "Convert SI Data to Model",
            "itemtype": "method",
            "name": "toModel",
            "static": 1,
            "class": "SIDatasHelper",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIDatasHelper.js",
            "line": 130,
            "description": "Convert Model to SI Datas",
            "class": "SIDatasHelper",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIJsonHelper.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIJsonHelper.js",
            "line": 20,
            "description": "Exposes APIs to deal with SI Datas, it convert models to si datas or si datas to models",
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIJsonHelper.js",
            "line": 28,
            "description": "Convert JSON Data to SI.",
            "itemtype": "method",
            "name": "toSI",
            "static": 1,
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Parser\\SIJsonHelper.js",
            "line": 102,
            "description": "Convert SI to JSON Data",
            "itemtype": "method",
            "name": "toJson",
            "static": 1,
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 43,
            "description": "Get Application Descriptor object of application.",
            "itemtype": "method",
            "name": "getApplicationDescriptor",
            "return": {
                "description": "Application Descriptor.",
                "type": "ApplicationDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 64,
            "description": "Get iterator of all database descriptors provided in Application Descriptor file.\n\n\t\t\tExample: ApplicationDescriptor.si.xml\n\t\t\t\t<siminov>\n\t\t\t\t\n\t\t\t\t\t<database-descriptors>\n\t\t\t\t\t\t<database-descriptor>DatabaseDescriptor.si.xml</database-descriptor>\n\t\t\t\t\t</database-descriptors>\n\t\t\t\n\t\t\t\t</siminov>",
            "itemtype": "method",
            "name": "getDatabaseDescriptorPaths",
            "return": {
                "description": "It contains all database descriptor paths provided.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 94,
            "description": "Get DatabaseDescriptor based on path provided as per defined in Application Descriptor file.\n\t\t\t\t\n\t\t\tExample: ApplicationDescriptor.si.xml\n\t\t\t\t\n\t\t\t\t<siminov>\n\t\t\t\t\n\t\t\t\t\t<database-descriptors>\n\t\t\t\t\t\t<database-descriptor>DatabaseDescriptor.si.xml</database-descriptor>\n\t\t\t\t\t</database-descriptors>\n\t\t\t\n\t\t\t\t</siminov>\n\t\t\n\t\t\t\t</pre>\n\t\t\t</p>",
            "itemtype": "method",
            "name": "getDatabaseDescriptorBasedOnPath",
            "params": [
                {
                    "name": "databaseDescriptorPath",
                    "description": "It which contains all database descriptor paths provided.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Database Descriptor",
                "type": "String"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 131,
            "description": "Get Database Descriptor based on database descriptor name provided as per defined in Database Descriptor file.\n\t\t\t\t\n\t\t\tExample: DatabaseDescriptor.si.xml\n\t\t\t\t\n\t\t\t\t<database-descriptor>\n\t\t\t\t\n\t\t\t\t\t<property name=\"database_name\">SIMINOV-HYBRID-TEMPLATE</property>\n\t\t\t\t\t\n\t\t\t\t</database-descriptor>",
            "itemtype": "method",
            "name": "getDatabaseDescriptorBasedOnName",
            "params": [
                {
                    "name": "databaseDescriptorName",
                    "description": "Database Descriptor object based on database descriptor name provided."
                }
            ],
            "return": {
                "description": "Database Descriptor",
                "type": "DatabaseDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 164,
            "description": "Get all Database Descriptors object.",
            "itemtype": "method",
            "name": "getDatabaseDescriptors",
            "return": {
                "description": "It which contains all Database Descriptors.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 185,
            "description": "Get Database Descriptor based on POJO class name provided.",
            "itemtype": "method",
            "name": "getDatabaseDescriptorBasedOnClassName",
            "params": [
                {
                    "name": "className",
                    "description": "POJO class name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Descriptor object in respect to POJO class name.",
                "type": "DatabaseDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 210,
            "description": "Get Database Descriptor based on table name provided.",
            "itemtype": "method",
            "name": "getDatabaseDescriptorBasedOnTableName",
            "params": [
                {
                    "name": "tableName",
                    "description": "Name of table.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Descriptor object in respect to table name.",
                "type": "DatabaseDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 235,
            "description": "Get database descriptor name based on class name",
            "itemtype": "method",
            "name": "getDatabaseDescriptorNameBasedOnClassName",
            "params": [
                {
                    "name": "className",
                    "description": "Name of Class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Descriptor Name",
                "type": "String"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 271,
            "description": "Get database descriptor name based on table name",
            "itemtype": "method",
            "name": "getDatabaseDescriptorNameBasedOnTableName",
            "params": [
                {
                    "name": "tableName",
                    "description": "Name of Table",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Descriptor Name",
                "type": "String"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 307,
            "description": "Get Database Mapping based on POJO class name provided.",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptorBasedOnClassName",
            "params": [
                {
                    "name": "className",
                    "description": "POJO class name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Mapping object in respect to POJO class name.",
                "type": "DatabaseMappingDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 332,
            "description": "Get Database Mapping Descriptor based on table name provided.",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptorBasedOnTableName",
            "params": [
                {
                    "name": "tableName",
                    "description": "Name of table.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Database Mapping Descriptor object in respect to table name.",
                "type": "DatabaseMappingDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 357,
            "description": "Get all database mapping descriptors",
            "itemtype": "method",
            "name": "getDatabaseMappingDescriptors",
            "return": {
                "description": "Database Mapping Descriptors",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 379,
            "description": "Get all library descriptor paths",
            "itemtype": "method",
            "name": "getLibraryDescriptorPaths",
            "return": {
                "description": "All Library Descriptor Paths",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 401,
            "description": "Get all library paths based on Database Descriptor name.",
            "itemtype": "method",
            "name": "getLibraryPathsBasedOnDatabaseDescriptorName",
            "params": [
                {
                    "name": "databaseDescriptorName",
                    "description": "Name of Database Descriptor.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "It contains all library paths based on Database Descriptor.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 426,
            "description": "Get all library descriptors",
            "itemtype": "method",
            "name": "getLibraryDescriptors",
            "return": {
                "description": "All Library Descriptors",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 448,
            "description": "Get all Library Descriptor objects based on Database Descriptor name.",
            "itemtype": "method",
            "name": "getLibrariesBasedOnDatabaseDescriptorName",
            "params": [
                {
                    "name": "databaseDescriptorName",
                    "description": "Name of Database Descriptor.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "It contains all Library Descriptor objects based on Database Descriptor name.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 498,
            "description": "Get Hybrid Descriptor.",
            "itemtype": "method",
            "name": "getHybridDescriptor",
            "return": {
                "description": "Hybrid Descriptor.",
                "type": "HybridDescriptor"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 520,
            "description": "Get All Adapters defined by Application.",
            "itemtype": "method",
            "name": "getAdapters",
            "return": {
                "description": "All Adapters.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 542,
            "description": "Get All Adapters defined in Libraries.",
            "itemtype": "method",
            "name": "getLibrariesAdapters",
            "return": {
                "description": "All Adapters.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 564,
            "description": "Get All Adapters Defined By Paths.",
            "itemtype": "method",
            "name": "getAdaptersBasedOnPaths",
            "return": {
                "description": "All Adapters.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 586,
            "description": "Get All Adapters based on library name.",
            "itemtype": "method",
            "name": "getLibraryAdaptersBasedOnName",
            "params": [
                {
                    "name": "libraryName",
                    "description": "Name of Library.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "All Adapters.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 611,
            "description": "Get All Adapters based on library path.",
            "itemtype": "method",
            "name": "getLibraryAdaptersBasedOnPath",
            "params": [
                {
                    "name": "libraryPath",
                    "description": "Path of Library."
                }
            ],
            "return": {
                "description": "All Adapters."
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 636,
            "description": "Get Adapter based on Adapter Name.",
            "itemtype": "method",
            "name": "getAdapter",
            "params": [
                {
                    "name": "adapterName",
                    "description": "Name of Adapter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Adapter",
                "type": "Adapter"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 661,
            "description": "Get Adapter based on adapter path.",
            "itemtype": "method",
            "name": "getAdapterBasedOnPath",
            "params": [
                {
                    "name": "adapterPath",
                    "description": "Path of Adapter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Adapter",
                "type": "Adapter"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 686,
            "description": "Get Adapter based on library name and adapter name,",
            "itemtype": "method",
            "name": "getLibraryAdapterBasedOnName",
            "params": [
                {
                    "name": "libraryName",
                    "description": "Name of Library.",
                    "type": "String"
                },
                {
                    "name": "adapterName",
                    "description": "Name of Adapter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Adapter.",
                "type": "Adapter"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 713,
            "description": "Get Adapter based on library path and adapter path.",
            "itemtype": "method",
            "name": "getLibraryAdapterBasedOnPath",
            "params": [
                {
                    "name": "libraryPath",
                    "description": "Name of Library.",
                    "type": "String"
                },
                {
                    "name": "adapterPath",
                    "description": "Path of Adapter.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Adapter.",
                "type": "Adapter"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 740,
            "description": "Get All Handlers defined by Application.",
            "itemtype": "method",
            "name": "getHandlers",
            "return": {
                "description": "All Handlers.",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Resource\\Resources.js",
            "line": 762,
            "description": "Get Handler based on Adapter Name and Handler Name.",
            "itemtype": "method",
            "name": "getHandler",
            "params": [
                {
                    "name": "adapterName",
                    "description": "Name of Adapter.",
                    "type": "String"
                },
                {
                    "name": "handlerName",
                    "description": "Name of Handler.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Handler.",
                "type": "Handler"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 20,
            "description": "Get all properties a given function contain.",
            "itemtype": "method",
            "name": "properties",
            "return": {
                "description": "All function properties",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 41,
            "description": "Check whether a give function contain provided property or not.",
            "itemtype": "method",
            "name": "containProperties",
            "return": {
                "description": "true/false; TRUE: If it contain property; FALSE: If it does not contain property.",
                "type": "Boolean"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 65,
            "description": "Get all GET properties a given function contain.",
            "itemtype": "method",
            "name": "getterProperties",
            "return": {
                "description": "All GET Properties",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 90,
            "description": "Get all SET properties a given function contain.",
            "itemtype": "method",
            "name": "setterProperties",
            "return": {
                "description": "All SET Properties",
                "type": "Array"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 114,
            "description": "Get name of given function.",
            "itemtype": "method",
            "name": "getObjectName",
            "return": {
                "description": "Name of Function",
                "type": "String"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 144,
            "description": "It is use to implement inherit parent properties in child.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 157,
            "description": "Create a instance of function.",
            "itemtype": "method",
            "name": "createFunctionInstance",
            "static": 1,
            "return": {
                "description": "Function Instance",
                "type": "Object"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 183,
            "description": "Populate data in object by invoking API and passing parameters to it.",
            "itemtype": "method",
            "name": "invokeAndInflate",
            "static": 1,
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Utils\\FunctionUtils.js",
            "line": 195,
            "description": "Invoke API and get data from object.",
            "itemtype": "method",
            "name": "invokeAndFetch",
            "static": 1,
            "return": {
                "description": "Return object from invoked API",
                "type": "Object"
            },
            "class": "FunctionUtils",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 26,
            "description": "Application Descriptor Name",
            "itemtype": "property",
            "name": "APPLICATION_DESCRIPTOR_NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 37,
            "description": "Application Descriptor Description",
            "itemtype": "property",
            "name": "APPLICATION_DESCRIPTOR_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 48,
            "description": "Application Descriptor Version",
            "itemtype": "property",
            "name": "APPLICATION_DESCRIPTOR_VERSION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 59,
            "description": "Application Descriptor Load Initially",
            "itemtype": "property",
            "name": "APPLICATION_DESCRIPTOR_LOAD_INITIALLY",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 75,
            "description": "Database Descriptor Database Name",
            "itemtype": "property",
            "name": "DATABASE_DESCRIPTOR_DATABASE_NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 86,
            "description": "Database Descriptor Description",
            "itemtype": "property",
            "name": "DATABASE_DESCRIPTOR_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 97,
            "description": "Database Descriptor Type",
            "itemtype": "property",
            "name": "DATABASE_DESCRIPTOR_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 108,
            "description": "Database Descriptor Is Locking Required",
            "itemtype": "property",
            "name": "DATABASE_DESCRIPTOR_IS_LOCKING_REQUIRED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 119,
            "description": "Database Descriptor External Storage",
            "itemtype": "property",
            "name": "DATABASE_DESCRIPTOR_EXTERNAL_STORAGE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 135,
            "description": "Library Descriptor Name",
            "itemtype": "property",
            "name": "LIBRARY_DESCRIPTOR_NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 146,
            "description": "Library Descriptor Description",
            "itemtype": "property",
            "name": "LIBRARY_DESCRIPTOR_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 162,
            "description": "Database Mapping Descriptor Parimary Key",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_PRIMARY_KEY",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 173,
            "description": "Database Mapping Descriptor Unique",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_UNIQUE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 184,
            "description": "Database Mapping Descriptor Not Null",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_NOT_NULL",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 195,
            "description": "Database Mapping Descriptor Default Value",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_DEFAULT_VALUE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 206,
            "description": "Database Mapping Descriptor Check",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_CHECK",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 217,
            "description": "Database Mapping Descriptor Type",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 229,
            "description": "Database Mapping Descriptor Relationships Load",
            "itemtype": "property",
            "name": "DATABASE_MAPPING_DESCRIPTOR_RELATIONSHIPS_LOAD",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 245,
            "description": "Hybrid Descriptor Adapter Name",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 256,
            "description": "Hybrid Descriptor Adapter Description",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 267,
            "description": "Hybrid Descriptor Adapter Type",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 278,
            "description": "Hybrid Descriptor Adapter Map To",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_MAP_TO",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 289,
            "description": "Hybrid Descriptor Adapter Cache",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_CACHE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 302,
            "description": "Hybrid Descriptor Adapter Handler Name",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_HANDLER_NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 313,
            "description": "Hybrid Descriptor Adapter Handler Map To",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_HANDLER_MAP_TO",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 324,
            "description": "Hybrid Descriptor Adapter Handler Description",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_HANDLER_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 336,
            "description": "Hybrid Descriptor Adapter Parameter Type",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_PARAMETER_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 347,
            "description": "Hybrid Descriptor Adapter Parameter Description",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_PARAMETER_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 359,
            "description": "Hybrid Descriptor Adapter Return Type",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_RETURN_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 370,
            "description": "Hybrid Descriptor Adapter Return Description",
            "itemtype": "property",
            "name": "HYBRID_DESCRIPTOR_ADAPTER_RETURN_DESCRIPTION",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 386,
            "description": "Event Handler Triggered Event",
            "itemtype": "property",
            "name": "EVENT_HANDLER_TRIGGERED_EVENT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 398,
            "description": "Event Handler ISiminov Event First Time Siminov Initialized",
            "itemtype": "property",
            "name": "EVENT_HANDLER_ISIMINOV_EVENT_FIRST_TIME_SIMINOV_INITIALIZED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 409,
            "description": "Event Handler ISiminov Event Siminov Initialized",
            "itemtype": "property",
            "name": "EVENT_HANDLER_ISIMINOV_EVENT_SIMINOV_INITIALIZED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 420,
            "description": "Event Handler ISiminov Event Siminov Stopped",
            "itemtype": "property",
            "name": "EVENT_HANDLER_ISIMINOV_EVENT_SIMINOV_STOPPED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 432,
            "description": "Event Handler IDatabase Event Database Created",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_DATABASE_CREATED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 443,
            "description": "Event Handler IDatabase Event Database Dropped",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_DATABASE_DROPPED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 454,
            "description": "Event Handler IDatabase Event Table Created",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_TABLE_CREATED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 465,
            "description": "Event Handler IDatabase Event Table Dropped",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_TABLE_DROPPED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 476,
            "description": "Event Handler IDatabase Event Index Created",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_INDEX_CREATED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 487,
            "description": "Event Handler IDatabase Event Index Dropped",
            "itemtype": "property",
            "name": "EVENT_HANDLER_IDATABASE_EVENT_INDEX_DROPPED",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 499,
            "description": "Event Handler Events",
            "itemtype": "property",
            "name": "EVENT_HANDLER_EVENTS",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 510,
            "description": "Event Handler Event Parameters",
            "itemtype": "property",
            "name": "EVENT_HANDLER_EVENT_PARAMETERS",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 527,
            "description": "Siminov Resources Adapter",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_ADAPTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 539,
            "description": "Siminov Resources Get Application Descriptor Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_APPLICATION_DESCRIPTOR_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 550,
            "description": "Siminov Resources Get Database Descriptor paths Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_PATHS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 561,
            "description": "Siminov Resources Get Database Descriptor Based On Path Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_BASED_ON_PATH_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 572,
            "description": "Siminov Resources Get Database Descriptor Based On Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_BASED_ON_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 583,
            "description": "Siminov Resources Get Database Descriptors Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTORS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 594,
            "description": "Siminov Resources Get Database Descriptor Based On Class Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_BASED_ON_CLASS_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 605,
            "description": "Siminov Resources Get Database Descriptor Based On Table Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_BASED_ON_TABLE_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 616,
            "description": "Siminov Resources Get Database Descriptor Name Based On Class Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_NAME_BASED_ON_CLASS_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 627,
            "description": "Siminov Resources Get Database Descriptor Name Based On Table Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_DESCRIPTOR_NAME_BASED_ON_TABLE_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 638,
            "description": "Siminov Resources Get Database Mapping Descriptor Based On Class Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_MAPPING_DESCRIPTOR_BASED_ON_CLASS_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 649,
            "description": "Siminov Resources Get Database Mapping Descriptor Based On Table Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_MAPPING_DESCRIPTOR_BASED_ON_TABLE_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 660,
            "description": "Siminov Resources Get Database Mapping Descriptors Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_DATABASE_MAPPING_DESCRIPTORS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 671,
            "description": "Siminov Resources Get Library Descriptor Paths Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_DESCRIPTOR_PATHS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 682,
            "description": "Siminov Resources Get Library Paths Based On Database Descriptor Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_PATHS_BASED_ON_DATABASE_DESCRIPTOR_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 693,
            "description": "Siminov Resources Get Library Descriptor Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_DESCRIPTORS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 704,
            "description": "Siminov Resources Get Libraries Based On Database Descriptor Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARIES_BASED_ON_DATABASE_DESCRIPTOR_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 715,
            "description": "Siminov Resources Get Library Database Mapping Descriptors Based On Library Descriptor Path Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_DATABASE_MAPPING_DESCRIPTORS_BASED_ON_LIBRARY_DESCRIPTOR_PATH_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 728,
            "description": "Siminov Resources Get Hybrid Descriptor Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_HYBRID_DESCRIPTOR_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 739,
            "description": "Siminov Resources Get Adapters Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_ADAPTERS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 750,
            "description": "Siminov Resources Get Libraries Adapters Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARIES_ADAPTERS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 761,
            "description": "Siminov Resources Get Adapters Based On Paths Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_ADAPTERS_BASED_ON_PATHS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 772,
            "description": "Siminov Resources Get Library Adapters Based On Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_ADAPTERS_BASED_ON_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 783,
            "description": "Siminov Resources Get Library Adapters Based On Path Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_ADAPTERS_BASED_ON_PATH_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 794,
            "description": "Siminov Resources Get Adapter Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_ADAPTER_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 805,
            "description": "Siminov Resources Get Adapter Based On Path Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_ADAPTER_BASED_ON_PATH_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 816,
            "description": "Siminov Resources Get Library Adapter Based On Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_ADAPTER_BASED_ON_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 827,
            "description": "Siminon Resources Get Library Adapter Based On Path Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_LIBRARY_ADAPTER_BASED_ON_PATH_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 839,
            "description": "Siminov Resources Get Handlers Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_HANDLERS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 850,
            "description": "Siminov Resources Get Handler Handler",
            "itemtype": "property",
            "name": "SIMINOV_RESOURCES_GET_HANDLER_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 866,
            "description": "Siminov Database Adapter",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_ADAPTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 878,
            "description": "Siminov Database Save Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_SAVE_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 889,
            "description": "Siminov Database Update Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_UPDATE_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 900,
            "description": "Siminov Database Save Or Update Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_SAVE_OR_UPDATE_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 911,
            "description": "Siminov Database Delete Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_DELETE_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 922,
            "description": "Siminov Database Select Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_SELECT_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 934,
            "description": "Siminov Database Count Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_COUNT_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 945,
            "description": "Siminov Database Average Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_AVERAGE_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 956,
            "description": "Siminov Database Max Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_MAX_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 967,
            "description": "Siminov Database Min Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_MIN_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 978,
            "description": "Siminov Database Sum Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_SUM_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 989,
            "description": "Siminov Database Total Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_TOTAL_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1000,
            "description": "Siminov Database Group Concat Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GROUP_CONCAT_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1012,
            "description": "Siminov Database Get Table Name Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_TABLE_NAME_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1023,
            "description": "Siminov Database Get Column Names Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_COLUMN_NAMES_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1034,
            "description": "Siminov Database Get Column Types Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_COLUMN_TYPES_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1045,
            "description": "Siminov Database Get Primary Keys Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_PRIMARY_KEYS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1056,
            "description": "Siminov Database Get Mandatory Fields Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_MANDATORY_FIELDS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1067,
            "description": "Siminov Database Get Unique Fields Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_UNIQUE_FIELDS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1078,
            "description": "Siminov Database Get Foreign Keys Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_GET_FOREIGN_KEYS_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1091,
            "description": "Siminov Database Begin Transaction Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_BEGIN_TRANSACTION_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1102,
            "description": "Siminov Database Commit Transaction Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_COMMIT_TRANSACTION_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1113,
            "description": "Siminov Database End Transaction Handler",
            "itemtype": "property",
            "name": "SIMINOV_DATABASE_END_TRANSACTION_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1129,
            "description": "Siminov Adapter",
            "itemtype": "property",
            "name": "SIMINOV_ADAPTER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1141,
            "description": "Siminov Adapter Initialize Siminov Handler",
            "itemtype": "property",
            "name": "SIMINOV_ADAPTER_INITIALIZE_SIMINOV_HANDLER",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1158,
            "description": "Siminov Hybrid Data",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1169,
            "description": "Siminov Hybrid Data Data",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA_DATA",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1180,
            "description": "Siminov Hybrid Data Data Type",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA_DATA_TYPE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1191,
            "description": "Siminov Hybrid Data Data Text",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA_DATA_TEXT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1202,
            "description": "Siminov Hybrid Data Value",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA_VALUE",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Constants.js",
            "line": 1213,
            "description": "Siminov Hyrbid Data Text",
            "itemtype": "property",
            "name": "SIMINOV_HYBRID_DATA_TEXT",
            "type": "String",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Import.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Siminov-build.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Siminov-build.js",
            "line": 35,
            "description": "It is the entry point to the SIMINOV HYBRID FRAMEWORK.\n\nWhen application starts it should call this method to activate SIMINOV HYBRID FRAMEWORK.\n\n\tSiminov will initialize all databases, and do necessary processing.\n\n\tEXAMPLE: \n          document.addEventListener(\"deviceready\", Siminov.initialize, false);",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "exception": "If any exception occur while deploying application it will through DeploymentException, which is RuntimeException.",
            "class": "Siminov",
            "module": "Exception"
        },
        {
            "file": "assets\\Siminov\\Siminov.js",
            "line": 1,
            "description": "[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "class": "",
            "module": "Exception"
        },
        {
            "file": "yuidoc.assets\\bootstrap\\assets\\vendor\\bootstrap\\js\\bootstrap.min.js",
            "line": 1,
            "description": "Bootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "class": "",
            "module": "Exception"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: methof",
            "line": " assets\\Siminov\\Model\\DatabaseMappingDescriptor.js:257"
        },
        {
            "message": "unknown tag: exception",
            "line": " assets\\Siminov\\Siminov-build.js:35"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Adapter\\Adapter.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Collection\\Dictionary.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Collection\\StringBuilder.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IAverage.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IAverage.js:52"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IAverageClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IAverageClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ICount.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ICount.js:49"
        },
        {
            "message": "Missing item type\nUsed to specify DISTINCT condition.",
            "line": " assets\\Siminov\\Database\\Impl\\ICount.js:55"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ICountClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ICountClause.js:50"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IDelete.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IDelete.js:51"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IDeleteClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IDeleteClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IGroupConcat.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IGroupConcat.js:51"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IGroupConcatClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IMax.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IMax.js:51"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IMaxClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IMaxClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IMin.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IMin.js:52"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\IMinClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\IMinClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ISelect.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ISelect.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ISelectClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ISelectClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ISum.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ISum.js:54"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ISumClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ISumClause.js:50"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ITotal.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ITotal.js:52"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Impl\\ITotalClause.js:1"
        },
        {
            "message": "Missing item type\nName of Interface",
            "line": " assets\\Siminov\\Database\\Impl\\ITotalClause.js:49"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Clause.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Database.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Database\\Select.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Events\\EventHandler.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Exception\\SiminovException.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Exception\\SiminovExceptionHandler.js:1"
        },
        {
            "message": "Missing item type\nAny exception thrown from NATIVE-TO-WEB is handled and show to user.",
            "line": " assets\\Siminov\\Exception\\SiminovExceptionHandler.js:19"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Log\\Log.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\ApplicationDescriptor.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\DatabaseDescriptor.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\DatabaseMappingDescriptor.js:1"
        },
        {
            "message": "Missing item type\nSet type of column as per defined in DatabaseMapping.core.xml file.",
            "line": " assets\\Siminov\\Model\\DatabaseMappingDescriptor.js:257"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:1"
        },
        {
            "message": "Missing item type\n<hybrid-descriptor>\n\t\n\t    <!-- Adapter -->\n\t    <adapter>\n\t        \n\t        <!-- General Adapter Properties -->\n\t        \t<!-- Mandatory Field -->\n\t        <property name=\"name\">adapter_name</property>\n\t        \t\n\t        \t<!-- Optional Field -->\n\t        <property name=\"description\">adapter_description</property>\n\t        \n\t        \t<!-- Mandatory Field -->\n\t        <property name=\"type\">WEB-TO-NATIVE|NATIVE-TO-WEB</property>\n\t        \n\t        \t<!-- Optional Field -->\n\t        <property name=\"map_to\">name_of_adapter_class</property>\n\t\n\t        \t<!-- Optional Field (DEFAULT: FALSE)-->\n\t        <property name=\"cache\">true/false</property>\n\t\n\t        \t<!-- Optional Error Handler -->\n\t        <property name=\"error_handler\">error_handler_id</property>\n\t        \n\t        <!-- Handlers -->\n\t        \t<!-- Handler -->\n\t        <handlers>\n\t            \n\t\t        <handler>\n\t\t            \n\t\t            <!-- General Handler Properties -->\n\t\t            \t<!-- Mandatory Field -->\n\t\t            <property name=\"name\">handler_name</property>\n\t\t            \n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"type\">SYNC|ASYNC</property>\n\t\t            \n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"callback_id\">callback_adapter_name</property>\n\t\t\n\t\t            \t<!-- Mandatory Field -->\n\t\t            <property name=\"map_to\">name_of_handler_method</property>\t            \n\t\n\t\t            \t<!-- Optional Field -->\n\t\t            <property name=\"description\">handler_description</property>\t            \n\t\n\t\t\t       \t\t<!-- Optional Error Handler -->\n\t\t\t       \t<property name=\"error_handler\">error_handler_id</property>\n\t\t\t            \t            \n\t\t            \t            \t           \n\t\t            <!-- Parameters -->\n\t\t            <parameters>\n\t\t                <!-- Parameter -->\n\t\t                <parameter>\n\t\t                    \n\t\t                    \t<!-- Mandatory Field -->\n\t\t                    <property name=\"type\">parameter_type</property>\n\t\t                    \n\t\t                    \t<!-- Optional Field -->\n\t\t                    <property name=\"description\">description_of_parameter</property>\n\t\t                    \n\t\t                </parameter>\n\t\t                \n\t\t            </parameters>\n\t\t            \n\t\t            <return>\n\t\t                \n\t\t                \t<!-- Mandatory Field -->\n\t\t                <property name=\"type\">return_type</property>\n\t\t                \n\t\t                \t<!-- Optional Field -->\n\t\t                <property name=\"description\">return_data_description</property>\n\t\t                \n\t\t            </return>\n\t\t            \n\t\t        </handler>\n\t\t            \n\t        </handlers>\n\t\n\t    </adapter>\n\t    \n\t\n\t    <!-- Adapter Paths -->\n\t    <adapter path=\"adapter_path\" />\n\t    \n\t\n\t    <!-- Library Needed Under This HybridDescriptor -->\n\t    <libraries>\n\t        \n\t        <library>full_path_of_library_descriptor_file</library>\n\t        \n\t    </libraries>\n\t    \n\t</hybrid-descriptor>",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:18"
        },
        {
            "message": "Missing item type\nGet Name of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:296"
        },
        {
            "message": "Missing item type\nSet Name of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:304"
        },
        {
            "message": "Missing item type\nGet Description of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:312"
        },
        {
            "message": "Missing item type\nSet Description of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:320"
        },
        {
            "message": "Missing item type\nGet Type of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:328"
        },
        {
            "message": "Missing item type\nSet Type of Adapter.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:336"
        },
        {
            "message": "Missing item type\nGet Map To Name.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:344"
        },
        {
            "message": "Missing item type\nSet Map To Name.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:352"
        },
        {
            "message": "Missing item type\nCheck whether cache is enabled or disabled.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:360"
        },
        {
            "message": "Missing item type\nSet Cache value.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:368"
        },
        {
            "message": "Missing item type\nExposes methods to GET and SET Return information as per define in HybridDescriptor.si.xml file or in standalone adapter xml file in application.",
            "line": " assets\\Siminov\\Model\\HybridDescriptor.js:691"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\HybridSiminovDatas.js:1"
        },
        {
            "message": "Missing item type\nExposes methods to GET and SET Siminov Hybrid Value structure.",
            "line": " assets\\Siminov\\Model\\HybridSiminovDatas.js:220"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Model\\LibraryDescriptor.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Parser\\SIDatasHelper.js:1"
        },
        {
            "message": "Missing item type\nConvert Model to SI Datas",
            "line": " assets\\Siminov\\Parser\\SIDatasHelper.js:130"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Parser\\SIJsonHelper.js:1"
        },
        {
            "message": "Missing item type\nExposes APIs to deal with SI Datas, it convert models to si datas or si datas to models",
            "line": " assets\\Siminov\\Parser\\SIJsonHelper.js:20"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Resource\\Resources.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Utils\\FunctionUtils.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Constants.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Import.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Siminov-build.js:1"
        },
        {
            "message": "Missing item type\n[SIMINOV FRAMEWORK]\nCopyright [2013] [Siminov Software Solution LLP|support@siminov.com]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
            "line": " assets\\Siminov\\Siminov.js:1"
        },
        {
            "message": "Missing item type\nBootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "line": " yuidoc.assets\\bootstrap\\assets\\vendor\\bootstrap\\js\\bootstrap.min.js:1"
        }
    ]
}