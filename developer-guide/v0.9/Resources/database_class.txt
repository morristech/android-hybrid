/**
 Exposes methods to deal with database. 
 It has methods to create, delete, and perform other common database management tasks.
 */
public abstract class Database implements Constants {

	/**
	   Is used to create a new table in an database.
	*/
	public static final void createTables(final Iterator<DatabaseMapping> databaseMappings) throws DatabaseException;

	/**
	   Is used to create a new table in an database.
	*/
	public static final void createTable(final DatabaseMapping databaseMapping) throws DatabaseException;

	/**
	   Is used to create a new index on a table in database.
	*/
	public static final void createIndex(final DatabaseMapping databaseMapping, final Index index) throws DatabaseException;

	/**
	   Is used to create a new index on a table in database.
	*/
	public static final void createIndex(final DatabaseMapping databaseMapping, final String indexName, final Iterator<String> columnNames, final boolean isUnique) throws DatabaseException;

	/**
	   Is used to create a new index on a table in database.
	*/
	public void createIndex(final Index index) throws DatabaseException;

	/**
	   Is used to create a new index on a table in database.
	*/
	public void createIndex(final String indexName, final Iterator<String> columnNames, final boolean isUnique) throws DatabaseException;

	/**
	   Is used to drop a index on a table in database.	
	*/
	public void dropIndex(final String indexName) throws DatabaseException;

	/**
	   Is used to drop a index on a table in database.
	*/
	public void dropIndex(final DatabaseMapping databaseMapping, final String indexName) throws DatabaseException;

	/**
	 It drop's the table from database
	*/
	public void dropTable() throws DatabaseException;

	/**
	 It drop's the table from database based on database-mapping.
	*/
	public static final void dropTable(final DatabaseMapping databaseMapping) throws DatabaseException;

	/**
	 It drop's the whole database based on database-descriptor.
	*/
	public static final void dropDatabase(final DatabaseDescriptor databaseDescriptor) throws DatabaseException;

	/**
	  Begins a transaction in EXCLUSIVE mode.
	*/
	public static final void beginTransaction(final DatabaseDescriptor databaseDescriptor) throws DatabaseException;

	/**
	 Marks the current transaction as successful.
	*/	 
	public static final void commitTransaction(final DatabaseDescriptor databaseDescriptor) throws DatabaseException;

	/**
	 End the current transaction.
	*/
	public static final void endTransaction(final DatabaseDescriptor databaseDescriptor);

	/**
	 Returns all tuples from mapped table for invoked class object.
	*/
	public final Object[] fetch() throws DatabaseException;

	/**
	 Returns selected column values for all tuples from mapped table for invoked class object.
	*/
	public final Object[] fetch(final Iterator<String> columnNames) throws DatabaseException;

	/**
	 Returns all tuples based on where clause from mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause) throws DatabaseException;


	/**
	 Returns selected column values of selected tuples based on where clause from mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause, final Iterator<String> columnNames) throws DatabaseException;

	/**
	 Returns selected column values of all tuples based on where clause across multiple records and group the results by one or more columns from mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause, final Iterator<String> columnNames, final Iterator<String> groupBy) throws DatabaseException;

	/**
	 Returns selected column values of all tuples based on where clause across multiple records and group the results by one or more columns, and can use having clause in combination with group by, for mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause, final Iterator<String> columnNames, final Iterator<String> groupBy, final String having) throws DatabaseException;

	/**
	 Returns A result set with the rows being sorted by the values of one or more column values of all tuples based on where clause across multiple records and group the results by one or more columns, and can use having clause in combination with group by, for mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause, final Iterator<String> columnNames, final Iterator<String> groupBy, final String having, final Iterator<String> orderBy) throws DatabaseException;

	/**
	 Returns A limited result set with the rows being sorted by the values of one or more column values of all tuples based on where clause across multiple records and group the results by one or more columns, and can use having clause in combination with group by, for mapped table for invoked class object.
	*/
	public final Object[] fetch(final String whereClause, final Iterator<String> columnNames, final Iterator<String> groupBy, final String having, final Iterator<String> orderBy, final String limit) throws DatabaseException;

	/**
	 Returns all tuples based on manual query from mapped table for invoked class object.
	*/
	public final Object[] fetchManual(final String query) throws DatabaseException;

	/**
	 It adds a record to any single table in a relational database.
	*/
	public final void save() throws DatabaseException;

	/**
	 It updates a record to any single table in a relational database.
	*/
	public final void update() throws DatabaseException;

	/**
	 It finds out weather tuple exists in table or not.
	*/
	public final void saveOrUpdate() throws DatabaseException;

	/**
	 It deletes a record to any single table in a relational database.
	*/
	public final void delete() throws DatabaseException;

	/**
	 It deletes one or more records from any single table in a relational database, based on where clause provided.
	*/
	public final void delete(final String whereClause) throws DatabaseException; 


	/**
 	 Returns the number of rows based on where clause provided.
	*/
	public final int count() throws DatabaseException;
	
	/**
	 Returns the number of rows based on where clause provided.
	*/
	public final int count(final String whereClause) throws DatabaseException;

	/**
	 Returns the average based on column name provided.
	*/
	public final int avg(final String columnName) throws DatabaseException;

	/**
	 Returns the sum based on column name provided.
	*/
	public final int sum(final String columnName) throws DatabaseException;

	/**
	 Returns the total based on column name provided.
	*/
	public final int total(final String columnName) throws DatabaseException;

	/**
	 Returns the minimum based on column name provided.
	*/
	public final int min(final String columnName) throws DatabaseException;




	/**
	 Returns the minimum based on column name provided.
	*/
	public final int min(final String columnName, final String groupBy) throws DatabaseException;

	/**
	 Returns the maximum based on column name provided.
	*/
	public final int max(final String columnName) throws DatabaseException;

	/**
	 Returns the maximum based on column name provided.
	*/
	public final int max(final String columnName, final String groupBy) throws DatabaseException;

	/**
	 Returns the group concat based on column name provided.	
	*/
	public final int groupConcat(final String columnName) throws DatabaseException;

	/**
	 Returns the group concat based on column name and where clause provided.
	*/
	public final String groupConcat(final String columnName, final String whereClause) throws DatabaseException;

	/**
	 Returns the group concat based on column name and where clause provided.
	*/
	public final String groupConcat(final String columnName, final String delimiter, final String whereClause) throws DatabaseException;

	/**
	 Returns database descriptor object based on the POJO class called.
	*/
	public final DatabaseDescriptor getDatabaseDescriptor() throws DatabaseException;

	/**
	 Returns the actual database mapping object mapped for invoked class object.
	*/
	public final DatabaseMapping getDatabaseMapping() throws DatabaseException;

	/**
	 Returns the mapped table name for invoked class object.
	*/
	public final String getTableName() throws DatabaseException;

	/**
	 Returns all column names of mapped table.
	*/
	public final Iterator<String> getColumnNames() throws DatabaseException;
	
	/**
	 Returns all column values in the same order of column names for invoked class object.
	*/
	public final Iterator<Object> getColumnValues() throws DatabaseException;

	/**
	 Returns all columns with there data types for invoked class object.
	*/
	public final Map<String, String> getColumnTypes() throws DatabaseException;

	/**
	 Returns all primary keys of mapped table for invoked class object.
	*/
	public final Iterator<String> getPrimaryKeys() throws DatabaseException;

	/**
	 Returns all mandatory fields which are associated with mapped table for invoked class object.
	*/
	public final Iterator<String> getMandatoryFields() throws DatabaseException;


	/**
	 Returns all unique fields which are associated with mapped table for invoked class object.
	*/
	public final Iterator<String> getUniqueFields() throws DatabaseException;

	/**
	 Returns all foreign keys of mapped table for invoked class object.
	*/
	public final Iterator<String> getForeignKeys() throws DatabaseException;

}
